
PdM_Practica0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003250  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003468  08003468  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003470  08003470  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000060  080034d4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080034d4  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008686  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b28  00000000  00000000  00028755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  0002a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000586  00000000  00000000  0002a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173e2  00000000  00000000  0002af66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b333  00000000  00000000  00042348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086c59  00000000  00000000  0004d67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020ac  00000000  00000000  000d42d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000d6380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080033d8 	.word	0x080033d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080033d8 	.word	0x080033d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  delay_t LedEdge, FSM_Time;                 //Declare my Time Delay Structure
  uint8_t PeriodIndex=0;				     //Pointer to the actual period of cycle
 8000582:	2300      	movs	r3, #0
 8000584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  tick_t Periodos[]={500,100};             //Timers vector in used of period cycle (Maxmum 2000, greater numbers are truncated)
 8000588:	4a39      	ldr	r2, [pc, #228]	; (8000670 <main+0xf4>)
 800058a:	463b      	mov	r3, r7
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	e883 0003 	stmia.w	r3, {r0, r1}
  float	  Duty_ON = 0.5;					 //Duty cycle for the turned on period of led... its range is from 0.0 to 1.0
 8000594:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000598:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fde5 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f86d 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f8d7 	bl	8000754 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  delayInit(&FSM_Time,FSM_PERIODE);   					//Initialize the delay timer for updating FSM of the debouncing
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	210a      	movs	r1, #10
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fb41 	bl	8000c34 <delayInit>
  delayInit(&LedEdge,Periodos[PeriodIndex]);   			//Initialize the delay timer for the period of the blinking led
 80005b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	3328      	adds	r3, #40	; 0x28
 80005ba:	443b      	add	r3, r7
 80005bc:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fb34 	bl	8000c34 <delayInit>
  debounceFSM_init();
 80005cc:	f000 fa60 	bl	8000a90 <debounceFSM_init>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2120      	movs	r1, #32
 80005d4:	4827      	ldr	r0, [pc, #156]	; (8000674 <main+0xf8>)
 80005d6:	f001 f99f 	bl	8001918 <HAL_GPIO_WritePin>
  ThreadComPort_Init();
 80005da:	f000 fcf3 	bl	8000fc4 <ThreadComPort_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(delayRead(&FSM_Time))
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fb47 	bl	8000c76 <delayRead>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f7      	beq.n	80005de <main+0x62>
	  {
		  debounceFSM_update();
 80005ee:	f000 fa6d 	bl	8000acc <debounceFSM_update>
		  ThreadComPort_Update();//Update the FSM for debouncing
 80005f2:	f000 fcf5 	bl	8000fe0 <ThreadComPort_Update>
		  if(readKeyPosEdge())
 80005f6:	f000 faf5 	bl	8000be4 <readKeyPosEdge>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00a      	beq.n	8000616 <main+0x9a>
		  {
			  sendSciMsg(DRQ_BCM_MOD1, &BatChargeMon.ChargerMod1, sizeof(BatChargeMon.ChargerMod1));  			//Reads if there was a edge on the user button,if so we turn on the LED
 8000600:	2210      	movs	r2, #16
 8000602:	491d      	ldr	r1, [pc, #116]	; (8000678 <main+0xfc>)
 8000604:	2080      	movs	r0, #128	; 0x80
 8000606:	f000 fc85 	bl	8000f14 <sendSciMsg>
			  PeriodIndex ^= 0x01;                          //if so, it mast switch the period of blinking and send a msg through UART
 800060a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  }
		  if(readKeyNegEdge())
 8000616:	f000 faf9 	bl	8000c0c <readKeyNegEdge>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <main+0xae>
		  {
			  sendSciMsg(DRQ_BCM_MOD1, &BatChargeMon.ChargerMod1, sizeof(BatChargeMon.ChargerMod1));  			//Reads if there was a edge on the user button,if so we turn on the LED
 8000620:	2210      	movs	r2, #16
 8000622:	4915      	ldr	r1, [pc, #84]	; (8000678 <main+0xfc>)
 8000624:	2080      	movs	r0, #128	; 0x80
 8000626:	f000 fc75 	bl	8000f14 <sendSciMsg>
                                                                                //if so, it mast switch the period of blinking and send a msg through UART
		  }
		  if(BytesDisponibles()){ //delayRead(&LedEdge)){											//if half time of the blinking period has passed toggle de led and
 800062a:	f000 fc67 	bl	8000efc <BytesDisponibles>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0d4      	beq.n	80005de <main+0x62>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);					//update the blinking time
 8000634:	2120      	movs	r1, #32
 8000636:	480f      	ldr	r0, [pc, #60]	; (8000674 <main+0xf8>)
 8000638:	f001 f987 	bl	800194a <HAL_GPIO_TogglePin>
			  delayWrite(&LedEdge,Periodos[PeriodIndex]*Duty_ON);
 800063c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	3328      	adds	r3, #40	; 0x28
 8000644:	443b      	add	r3, r7
 8000646:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800064a:	ee07 3a90 	vmov	s15, r3
 800064e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000652:	edd7 7a08 	vldr	s15, [r7, #32]
 8000656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800065a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	ee17 1a90 	vmov	r1, s15
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fb2f 	bl	8000cca <delayWrite>
	  if(delayRead(&FSM_Time))
 800066c:	e7b7      	b.n	80005de <main+0x62>
 800066e:	bf00      	nop
 8000670:	080033f0 	.word	0x080033f0
 8000674:	40020000 	.word	0x40020000
 8000678:	200000d8 	.word	0x200000d8

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fa20 	bl	8002ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a28      	ldr	r2, [pc, #160]	; (800074c <SystemClock_Config+0xd0>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd4>)
 80006ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f0:	2310      	movs	r3, #16
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f93a 	bl	8001980 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f88d 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fb9c 	bl	8001e70 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073e:	f000 f877 	bl	8000830 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a2c      	ldr	r2, [pc, #176]	; (8000824 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a25      	ldr	r2, [pc, #148]	; (8000824 <MX_GPIO_Init+0xd0>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	4812      	ldr	r0, [pc, #72]	; (8000828 <MX_GPIO_Init+0xd4>)
 80007e0:	f001 f89a 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_GPIO_Init+0xd8>)
 80007fc:	f000 fe0c 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000800:	2320      	movs	r3, #32
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0xd4>)
 8000818:	f000 fdfe 	bl	8001418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020800 	.word	0x40020800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087a:	2007      	movs	r0, #7
 800087c:	f000 fd98 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_UART_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e6:	230c      	movs	r3, #12
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_MspInit+0x8c>)
 8000902:	f000 fd89 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40004400 	.word	0x40004400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_UART_MspDeInit+0x30>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d109      	bne.n	8000942 <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_UART_MspDeInit+0x34>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_UART_MspDeInit+0x34>)
 8000934:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800093a:	210c      	movs	r1, #12
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <HAL_UART_MspDeInit+0x38>)
 800093e:	f000 feef 	bl	8001720 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40004400 	.word	0x40004400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800095c:	e7fe      	b.n	800095c <NMI_Handler+0x4>

0800095e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 fc32 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <_sbrk+0x5c>)
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <_sbrk+0x60>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <_sbrk+0x64>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <_sbrk+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d207      	bcs.n	80009ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009dc:	f002 f880 	bl	8002ae0 <__errno>
 80009e0:	4603      	mov	r3, r0
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ea:	e009      	b.n	8000a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <_sbrk+0x64>)
 80009fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20018000 	.word	0x20018000
 8000a0c:	00000400 	.word	0x00000400
 8000a10:	2000007c 	.word	0x2000007c
 8000a14:	20000328 	.word	0x20000328

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a58:	4c0b      	ldr	r4, [pc, #44]	; (8000a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a66:	f7ff ffd7 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f002 f83f 	bl	8002aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fd85 	bl	800057c <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a80:	08003478 	.word	0x08003478
  ldr r2, =_sbss
 8000a84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a88:	20000324 	.word	0x20000324

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <debounceFSM_init>:
static debounceState_t debounceState;  //State variable of the FSM
static bool_t buttonPosEdge,buttonNegEdge;			   //Variable that stores if there was or not a positive edge on the button position
static delay_t debounceDelay;		   //delay variable to manage the time on the FSM changes


void debounceFSM_init() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	debounceState = BUTTON_UP;					//Initialize the state button like not pressed
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <debounceFSM_init+0x2c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
	buttonPosEdge = false;							//No edge yet (no time)
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <debounceFSM_init+0x30>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	buttonNegEdge = false;							//No edge yet (no time)
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <debounceFSM_init+0x34>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
	tick_t initialDelay = DEBOUNCETIME;         // Set the initial time of the delay (200ms)
 8000aa8:	2328      	movs	r3, #40	; 0x28
 8000aaa:	607b      	str	r3, [r7, #4]
	delayInit(&debounceDelay, initialDelay); 	// Initialize the counter
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <debounceFSM_init+0x38>)
 8000ab0:	f000 f8c0 	bl	8000c34 <delayInit>

}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000080 	.word	0x20000080
 8000ac0:	20000081 	.word	0x20000081
 8000ac4:	20000082 	.word	0x20000082
 8000ac8:	20000084 	.word	0x20000084

08000acc <debounceFSM_update>:
 * debounceFSM_init Function:
 * Function that initialize the Finit State Machine that controls the
 * debouncing logic for the user button on de NUCLEO-F401RE.
 *********************************************************************/

void debounceFSM_update(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

	GPIO_PinState buttonState = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad6:	4832      	ldr	r0, [pc, #200]	; (8000ba0 <debounceFSM_update+0xd4>)
 8000ad8:	f000 ff06 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]

	switch (debounceState) {
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <debounceFSM_update+0xd8>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d845      	bhi.n	8000b74 <debounceFSM_update+0xa8>
 8000ae8:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <debounceFSM_update+0x24>)
 8000aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aee:	bf00      	nop
 8000af0:	08000b01 	.word	0x08000b01
 8000af4:	08000b15 	.word	0x08000b15
 8000af8:	08000b3b 	.word	0x08000b3b
 8000afc:	08000b4f 	.word	0x08000b4f

	case BUTTON_UP:

		if (GPIO_PIN_RESET == buttonState) {	//if the button was pressed change the state to verify if it was noise or not
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d140      	bne.n	8000b88 <debounceFSM_update+0xbc>
			debounceState = BUTTON_FALLING;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <debounceFSM_update+0xd8>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);
 8000b0c:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <debounceFSM_update+0xdc>)
 8000b0e:	f000 f8b2 	bl	8000c76 <delayRead>
		}

		break;
 8000b12:	e039      	b.n	8000b88 <debounceFSM_update+0xbc>

	case BUTTON_FALLING:

		if (delayRead(&debounceDelay)){				//if the amount of time that we have to wait has passed verify if the button
 8000b14:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <debounceFSM_update+0xdc>)
 8000b16:	f000 f8ae 	bl	8000c76 <delayRead>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d035      	beq.n	8000b8c <debounceFSM_update+0xc0>
			if (GPIO_PIN_RESET == buttonState) {	//continue pressed or not, if so send the state to button pressed (BUTTON_DOWN), else
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d105      	bne.n	8000b32 <debounceFSM_update+0x66>
				debounceState = BUTTON_DOWN;		//go back to button up because it was noise.
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <debounceFSM_update+0xd8>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000b2c:	f000 f842 	bl	8000bb4 <buttonPressed>
			else {
				debounceState = BUTTON_UP;
			}
		}

		break;
 8000b30:	e02c      	b.n	8000b8c <debounceFSM_update+0xc0>
				debounceState = BUTTON_UP;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <debounceFSM_update+0xd8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
		break;
 8000b38:	e028      	b.n	8000b8c <debounceFSM_update+0xc0>
	case BUTTON_DOWN:

		if (GPIO_PIN_SET == buttonState) {		//if the button was released change the state to verify if it was noise or not
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d127      	bne.n	8000b90 <debounceFSM_update+0xc4>
			debounceState = BUTTON_RAISING;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <debounceFSM_update+0xd8>)
 8000b42:	2203      	movs	r2, #3
 8000b44:	701a      	strb	r2, [r3, #0]
			delayRead(&debounceDelay);
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <debounceFSM_update+0xdc>)
 8000b48:	f000 f895 	bl	8000c76 <delayRead>
		}


		break;
 8000b4c:	e020      	b.n	8000b90 <debounceFSM_update+0xc4>

	case BUTTON_RAISING:

		if (delayRead(&debounceDelay)){				//if the amount of time that we have to wait has passed, verify if the button
 8000b4e:	4816      	ldr	r0, [pc, #88]	; (8000ba8 <debounceFSM_update+0xdc>)
 8000b50:	f000 f891 	bl	8000c76 <delayRead>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d01c      	beq.n	8000b94 <debounceFSM_update+0xc8>
			if (GPIO_PIN_SET == buttonState) {		//continue released or not, if so send the state to button release (BUTTON_UP), else
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <debounceFSM_update+0xa0>
				debounceState = BUTTON_UP;			//go back to button down because it was noise.
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <debounceFSM_update+0xd8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000b66:	f000 f831 	bl	8000bcc <buttonReleased>
			else {
				debounceState = BUTTON_DOWN;
			}
		}

		break;
 8000b6a:	e013      	b.n	8000b94 <debounceFSM_update+0xc8>
				debounceState = BUTTON_DOWN;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <debounceFSM_update+0xd8>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	701a      	strb	r2, [r3, #0]
		break;
 8000b72:	e00f      	b.n	8000b94 <debounceFSM_update+0xc8>

	default:
		debounceState = BUTTON_UP;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <debounceFSM_update+0xd8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
		buttonPosEdge = false;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <debounceFSM_update+0xe0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
		buttonNegEdge = false;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <debounceFSM_update+0xe4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
		break;
 8000b86:	e006      	b.n	8000b96 <debounceFSM_update+0xca>
		break;
 8000b88:	bf00      	nop
 8000b8a:	e004      	b.n	8000b96 <debounceFSM_update+0xca>
		break;
 8000b8c:	bf00      	nop
 8000b8e:	e002      	b.n	8000b96 <debounceFSM_update+0xca>
		break;
 8000b90:	bf00      	nop
 8000b92:	e000      	b.n	8000b96 <debounceFSM_update+0xca>
		break;
 8000b94:	bf00      	nop

	}

}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	20000081 	.word	0x20000081
 8000bb0:	20000082 	.word	0x20000082

08000bb4 <buttonPressed>:


void buttonPressed() {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
//	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	  buttonPosEdge = true;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <buttonPressed+0x14>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	20000081 	.word	0x20000081

08000bcc <buttonReleased>:



void buttonReleased(){
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
//	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	  buttonNegEdge = true;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <buttonReleased+0x14>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	20000082 	.word	0x20000082

08000be4 <readKeyPosEdge>:

bool_t readKeyPosEdge(){
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	if(buttonPosEdge){
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <readKeyPosEdge+0x24>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <readKeyPosEdge+0x16>
		buttonPosEdge = false;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <readKeyPosEdge+0x24>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		return true;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <readKeyPosEdge+0x18>
	}
	else
		return false;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000081 	.word	0x20000081

08000c0c <readKeyNegEdge>:

bool_t readKeyNegEdge(){
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	if(buttonNegEdge){
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <readKeyNegEdge+0x24>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d004      	beq.n	8000c22 <readKeyNegEdge+0x16>
		buttonNegEdge = false;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <readKeyNegEdge+0x24>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
		return true;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <readKeyNegEdge+0x18>
	}
	else
		return false;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000082 	.word	0x20000082

08000c34 <delayInit>:
 * time duration specify in the duration parameter in usec.
 * Do not initialize the counter and leave the running state on false.
 *********************************************************************/

void delayInit( delay_t * delay, tick_t duration )
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	if(MAX_DELAY < duration)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c44:	d904      	bls.n	8000c50 <delayInit+0x1c>
		delay->duration = MAX_DELAY;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	e009      	b.n	8000c64 <delayInit+0x30>
	else if( MIN_DELAY > duration)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <delayInit+0x2a>
		delay->duration = MIN_DELAY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	e002      	b.n	8000c64 <delayInit+0x30>
	else
		delay->duration = duration;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	605a      	str	r2, [r3, #4]

	delay->running = false;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	721a      	strb	r2, [r3, #8]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <delayRead>:
 * Send back true value if the time has been completed or false otherwise
 * (if the time has not been arrived or just start to run)
 *********************************************************************/

bool_t delayRead( delay_t * delay )
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]

	bool_t TimeArrived = false;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
	if(delay != NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d01b      	beq.n	8000cc0 <delayRead+0x4a>
	{
		if(delay->running)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7a1b      	ldrb	r3, [r3, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00f      	beq.n	8000cb0 <delayRead+0x3a>
		{
			if(HAL_GetTick()-delay->startTime >= delay->duration)
 8000c90:	f000 fad0 	bl	8001234 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	1ad2      	subs	r2, r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d30d      	bcc.n	8000cc0 <delayRead+0x4a>
			{
				TimeArrived = true;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
				delay->running = false;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	721a      	strb	r2, [r3, #8]
 8000cae:	e007      	b.n	8000cc0 <delayRead+0x4a>
			}
		}
		else
		{
			delay->startTime = HAL_GetTick();
 8000cb0:	f000 fac0 	bl	8001234 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
			delay->running = true;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	721a      	strb	r2, [r3, #8]
		}
	}

	return TimeArrived;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <delayWrite>:
 * delayWrite Function:
 * This function is used to set the duration time in usec of a delay structure
 *********************************************************************/

void delayWrite( delay_t * delay, tick_t duration )
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
	if(MAX_DELAY < duration)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cda:	d904      	bls.n	8000ce6 <delayWrite+0x1c>
		delay->duration = MAX_DELAY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ce2:	605a      	str	r2, [r3, #4]
	else if( MIN_DELAY > duration)
		delay->duration = MIN_DELAY;
	else
		delay->duration = duration;
}
 8000ce4:	e009      	b.n	8000cfa <delayWrite+0x30>
	else if( MIN_DELAY > duration)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d103      	bne.n	8000cf4 <delayWrite+0x2a>
		delay->duration = MIN_DELAY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	605a      	str	r2, [r3, #4]
}
 8000cf2:	e002      	b.n	8000cfa <delayWrite+0x30>
		delay->duration = duration;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <OpenCommPort>:
 * Function that initialize the UART periferial, and send the initialization
 * parameter through the port.
 * It devolve TRUE if the port is initialized correctly and false otherwise.
 *********************************************************************/
int32_t OpenCommPort(uint32_t Baudios)
{
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b092      	sub	sp, #72	; 0x48
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

	  int32_t PortStatus=0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44

	  huart2.Instance = USART2;								//Initializing the UART periferial port
 8000d14:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <OpenCommPort+0x110>)
 8000d16:	4a41      	ldr	r2, [pc, #260]	; (8000e1c <OpenCommPort+0x114>)
 8000d18:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <OpenCommPort+0x110>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <OpenCommPort+0x110>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <OpenCommPort+0x110>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <OpenCommPort+0x110>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <OpenCommPort+0x110>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <OpenCommPort+0x110>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <OpenCommPort+0x110>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
	  huart2.RxXferSize = 256;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <OpenCommPort+0x110>)
 8000d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4c:	859a      	strh	r2, [r3, #44]	; 0x2c
	  huart2.TxXferSize = 256;
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <OpenCommPort+0x110>)
 8000d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d54:	849a      	strh	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d56:	4830      	ldr	r0, [pc, #192]	; (8000e18 <OpenCommPort+0x110>)
 8000d58:	f001 faaa 	bl	80022b0 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <OpenCommPort+0x60>
	  {
		  PortStatus=1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	647b      	str	r3, [r7, #68]	; 0x44
 8000d66:	e052      	b.n	8000e0e <OpenCommPort+0x106>
	  }
	  else
	  {
		  char BaudRateMSG[]="Communication Init \n\rBaudrate: ";
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <OpenCommPort+0x118>)
 8000d6a:	f107 0408 	add.w	r4, r7, #8
 8000d6e:	461d      	mov	r5, r3
 8000d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  while(HAL_BUSY == HAL_UART_Transmit(&huart2, (const uint8_t *) BaudRateMSG, sizeof(BaudRateMSG),100));
 8000d7c:	bf00      	nop
 8000d7e:	f107 0108 	add.w	r1, r7, #8
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2220      	movs	r2, #32
 8000d86:	4824      	ldr	r0, [pc, #144]	; (8000e18 <OpenCommPort+0x110>)
 8000d88:	f001 fb0e 	bl	80023a8 <HAL_UART_Transmit>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d0f5      	beq.n	8000d7e <OpenCommPort+0x76>

		  char BaudRateValue[20];
		  int32_t BRValue=huart2.Init.BaudRate;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <OpenCommPort+0x110>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
		  uint8_t i=0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  i=sprintf(BaudRateValue, "%d",(int)BRValue);   //Convert Baudrate value to string to show it on Std IO
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000da4:	491f      	ldr	r1, [pc, #124]	; (8000e24 <OpenCommPort+0x11c>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fe72 	bl	8002a90 <siprintf>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  BaudRateValue[i++] = 0x0A;
 8000db2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000dbc:	3348      	adds	r3, #72	; 0x48
 8000dbe:	443b      	add	r3, r7
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	f803 2c20 	strb.w	r2, [r3, #-32]
		  BaudRateValue[i++] = 0x0D;
 8000dc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000dd0:	3348      	adds	r3, #72	; 0x48
 8000dd2:	443b      	add	r3, r7
 8000dd4:	220d      	movs	r2, #13
 8000dd6:	f803 2c20 	strb.w	r2, [r3, #-32]
		  BaudRateValue[i++] = 0x00;
 8000dda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000de4:	3348      	adds	r3, #72	; 0x48
 8000de6:	443b      	add	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	f803 2c20 	strb.w	r2, [r3, #-32]
		  while(HAL_BUSY == HAL_UART_Transmit(&huart2, (const uint8_t *) BaudRateValue, i,100));
 8000dee:	bf00      	nop
 8000df0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <OpenCommPort+0x110>)
 8000dfe:	f001 fad3 	bl	80023a8 <HAL_UART_Transmit>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d0f3      	beq.n	8000df0 <OpenCommPort+0xe8>
		  m_CommOpen =true;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <OpenCommPort+0x120>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
	  }

	  return PortStatus;
 8000e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3748      	adds	r7, #72	; 0x48
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	20000090 	.word	0x20000090
 8000e1c:	40004400 	.word	0x40004400
 8000e20:	080033fc 	.word	0x080033fc
 8000e24:	080033f8 	.word	0x080033f8
 8000e28:	200000d4 	.word	0x200000d4

08000e2c <CloseCommPort>:

/**********************************************************************
*********************************************************************/

void CloseCommPort(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <CloseCommPort+0x14>)
 8000e32:	f001 fa8a 	bl	800234a <HAL_UART_DeInit>
	m_CommOpen =false;
 8000e36:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <CloseCommPort+0x18>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000090 	.word	0x20000090
 8000e44:	200000d4 	.word	0x200000d4

08000e48 <ComError>:

/**********************************************************************
*********************************************************************/

DWORD ComError(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	return (DWORD) huart2.ErrorCode;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <ComError+0x14>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	b29b      	uxth	r3, r3
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	20000090 	.word	0x20000090

08000e60 <ReadBytes>:


/**********************************************************************
********************************************************************/
int32_t ReadBytes(void *Buffer, int32_t n) //Lectura de n del buffer de entrada
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	if(HAL_OK == HAL_UART_Transmit(&huart2, (const uint8_t *)Buffer, n,100))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	2364      	movs	r3, #100	; 0x64
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <ReadBytes+0x2c>)
 8000e74:	f001 fa98 	bl	80023a8 <HAL_UART_Transmit>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <ReadBytes+0x22>
		return 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <ReadBytes+0x24>
	return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000090 	.word	0x20000090

08000e90 <PutByte>:
* Send through the UART port the elements pointed for *pstring.
* @param pstring is a pointer to the first element to be send.
* @param size the amount of element to be send.
*********************************************************************/
int32_t PutByte(BYTE value) //Envio de un caracter
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_UART_Transmit(&huart2, (const uint8_t *)&value, 1,10))
 8000e9a:	1df9      	adds	r1, r7, #7
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <PutByte+0x2c>)
 8000ea2:	f001 fa81 	bl	80023a8 <HAL_UART_Transmit>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <PutByte+0x20>
		return 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <PutByte+0x22>
	return 0;
 8000eb0:	2300      	movs	r3, #0

}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000090 	.word	0x20000090

08000ec0 <WriteBytes>:
/**********************************************************************
*********************************************************************/
int32_t WriteBytes(void *Buffer, int32_t n) //Escritura de n en el buffer de entrada
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	if(HAL_OK == HAL_UART_Transmit(&huart2, (const uint8_t *)Buffer,n,10*n))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	460a      	mov	r2, r1
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <WriteBytes+0x38>)
 8000ede:	f001 fa63 	bl	80023a8 <HAL_UART_Transmit>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <WriteBytes+0x2c>
		return 1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <WriteBytes+0x2e>
	return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000090 	.word	0x20000090

08000efc <BytesDisponibles>:
/**********************************************************************
* BytesDisponibles Function:
* Return the amount of
*********************************************************************/
int32_t BytesDisponibles(void) //Devuelve la cantidad de Bytes en el buffer de entrada
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	return (int32_t) huart2.RxXferCount;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <BytesDisponibles+0x14>)
 8000f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000f04:	b29b      	uxth	r3, r3
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000090 	.word	0x20000090

08000f14 <sendSciMsg>:
* BytesDisponibles Function:
* Return the amount of
*********************************************************************/

bool sendSciMsg(BYTE codigo, void *data, uint8_t dataLen)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
    DWORD cantWritten = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	81fb      	strh	r3, [r7, #14]

    if(!m_CommOpen) //Verifica si el puerto esta abierto
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <sendSciMsg+0xac>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	f083 0301 	eor.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <sendSciMsg+0x26>
      return false;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e03d      	b.n	8000fb6 <sendSciMsg+0xa2>

    if((data == NULL) && dataLen)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d104      	bne.n	8000f4a <sendSciMsg+0x36>
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <sendSciMsg+0x36>
      return false;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e035      	b.n	8000fb6 <sendSciMsg+0xa2>

    cantWritten += PutByte(SFD);
 8000f4a:	2023      	movs	r0, #35	; 0x23
 8000f4c:	f7ff ffa0 	bl	8000e90 <PutByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	4413      	add	r3, r2
 8000f58:	81fb      	strh	r3, [r7, #14]
    cantWritten += PutByte(dataLen+1);
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff95 	bl	8000e90 <PutByte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	81fb      	strh	r3, [r7, #14]
    cantWritten += PutByte(codigo);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff8c 	bl	8000e90 <PutByte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	4413      	add	r3, r2
 8000f80:	81fb      	strh	r3, [r7, #14]
    if(!WriteBytes(data,dataLen))
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f7ff ff9a 	bl	8000ec0 <WriteBytes>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <sendSciMsg+0x82>
      return false;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e00f      	b.n	8000fb6 <sendSciMsg+0xa2>
    cantWritten += PutByte(EOFCOM);
 8000f96:	20ff      	movs	r0, #255	; 0xff
 8000f98:	f7ff ff7a 	bl	8000e90 <PutByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	81fb      	strh	r3, [r7, #14]

    if(cantWritten < (4+dataLen))
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	1cda      	adds	r2, r3, #3
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	db01      	blt.n	8000fb4 <sendSciMsg+0xa0>
    {
      return false;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e000      	b.n	8000fb6 <sendSciMsg+0xa2>
    }

    return true;
 8000fb4:	2301      	movs	r3, #1

}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200000d4 	.word	0x200000d4

08000fc4 <ThreadComPort_Init>:
static TThreadComPort ThreadComPort;
//---------------------------------------------------------------------------


void ThreadComPort_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  OpenCommPort(115200);
 8000fc8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000fcc:	f7ff fe9c 	bl	8000d08 <OpenCommPort>
  ThreadComPort.rxParser = PARSER_PRINC;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <ThreadComPort_Init+0x18>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000158 	.word	0x20000158

08000fe0 <ThreadComPort_Update>:
//---------------------------------------------------------------------------

void ThreadComPort_Update(void)
{
 8000fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  DWORD CantBytesReadAnt;
  BYTE Dato;

  for(int i = 0; i < 10; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	e0ac      	b.n	8001148 <ThreadComPort_Update+0x168>
  {
      ThreadComPort.ComErr = ComError();
 8000fee:	f7ff ff2b 	bl	8000e48 <ComError>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b59      	ldr	r3, [pc, #356]	; (800115c <ThreadComPort_Update+0x17c>)
 8000ff8:	801a      	strh	r2, [r3, #0]
      CantBytesReadAnt = ThreadComPort.CantBytesRead;
 8000ffa:	4b58      	ldr	r3, [pc, #352]	; (800115c <ThreadComPort_Update+0x17c>)
 8000ffc:	885b      	ldrh	r3, [r3, #2]
 8000ffe:	807b      	strh	r3, [r7, #2]
      ThreadComPort.CantBytesRead = BytesDisponibles();
 8001000:	f7ff ff7c 	bl	8000efc <BytesDisponibles>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b54      	ldr	r3, [pc, #336]	; (800115c <ThreadComPort_Update+0x17c>)
 800100a:	805a      	strh	r2, [r3, #2]
      if(ThreadComPort.CantBytesRead  > DIM_ADQ)
 800100c:	4b53      	ldr	r3, [pc, #332]	; (800115c <ThreadComPort_Update+0x17c>)
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	d901      	bls.n	8001018 <ThreadComPort_Update+0x38>
      {
        CloseCommPort();
 8001014:	f7ff ff0a 	bl	8000e2c <CloseCommPort>
      }
      if((ThreadComPort.rxParser == PARSER_PRINC) || (ThreadComPort.CantBytesRead  - CantBytesReadAnt))
 8001018:	4b50      	ldr	r3, [pc, #320]	; (800115c <ThreadComPort_Update+0x17c>)
 800101a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <ThreadComPort_Update+0x4c>
 8001022:	4b4e      	ldr	r3, [pc, #312]	; (800115c <ThreadComPort_Update+0x17c>)
 8001024:	885b      	ldrh	r3, [r3, #2]
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	429a      	cmp	r2, r3
 800102a:	d008      	beq.n	800103e <ThreadComPort_Update+0x5e>
      {
        ThreadComPort.Tiempo = HAL_GetTick();
 800102c:	f000 f902 	bl	8001234 <HAL_GetTick>
 8001030:	4603      	mov	r3, r0
 8001032:	2200      	movs	r2, #0
 8001034:	469a      	mov	sl, r3
 8001036:	4693      	mov	fp, r2
 8001038:	4b48      	ldr	r3, [pc, #288]	; (800115c <ThreadComPort_Update+0x17c>)
 800103a:	e9c3 ab02 	strd	sl, fp, [r3, #8]
      }
      if(HAL_GetTick()-ThreadComPort.Tiempo >= ADQ_TIMEOUT)
 800103e:	f000 f8f9 	bl	8001234 <HAL_GetTick>
 8001042:	4603      	mov	r3, r0
 8001044:	2200      	movs	r2, #0
 8001046:	4698      	mov	r8, r3
 8001048:	4691      	mov	r9, r2
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <ThreadComPort_Update+0x17c>)
 800104c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001050:	ebb8 0402 	subs.w	r4, r8, r2
 8001054:	eb69 0503 	sbc.w	r5, r9, r3
 8001058:	2c64      	cmp	r4, #100	; 0x64
 800105a:	f175 0300 	sbcs.w	r3, r5, #0
 800105e:	db0a      	blt.n	8001076 <ThreadComPort_Update+0x96>
      {
        ThreadComPort.EstSciRv |= TIMEOUT;
 8001060:	4b3e      	ldr	r3, [pc, #248]	; (800115c <ThreadComPort_Update+0x17c>)
 8001062:	7c1b      	ldrb	r3, [r3, #16]
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <ThreadComPort_Update+0x17c>)
 800106c:	741a      	strb	r2, [r3, #16]
        ThreadComPort.rxParser = PARSER_PRINC;
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <ThreadComPort_Update+0x17c>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      }

      if(ThreadComPort.CantBytesRead  > 0)
 8001076:	4b39      	ldr	r3, [pc, #228]	; (800115c <ThreadComPort_Update+0x17c>)
 8001078:	885b      	ldrh	r3, [r3, #2]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d04e      	beq.n	800111c <ThreadComPort_Update+0x13c>
      {
        switch(ThreadComPort.rxParser)
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <ThreadComPort_Update+0x17c>)
 8001080:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001084:	2b03      	cmp	r3, #3
 8001086:	d841      	bhi.n	800110c <ThreadComPort_Update+0x12c>
 8001088:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <ThreadComPort_Update+0xb0>)
 800108a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108e:	bf00      	nop
 8001090:	080010a1 	.word	0x080010a1
 8001094:	080010bb 	.word	0x080010bb
 8001098:	080010cd 	.word	0x080010cd
 800109c:	080010f3 	.word	0x080010f3
        {
        case PARSER_PRINC:
          ReadBytes(&Dato, 1);
 80010a0:	1c7b      	adds	r3, r7, #1
 80010a2:	2101      	movs	r1, #1
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fedb 	bl	8000e60 <ReadBytes>
          if(Dato == SFD)
 80010aa:	787b      	ldrb	r3, [r7, #1]
 80010ac:	2b23      	cmp	r3, #35	; 0x23
 80010ae:	d12a      	bne.n	8001106 <ThreadComPort_Update+0x126>
          {
            ThreadComPort.rxParser = PARSER_LENGTH;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <ThreadComPort_Update+0x17c>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          }
        break;
 80010b8:	e025      	b.n	8001106 <ThreadComPort_Update+0x126>
        case PARSER_LENGTH:
          ReadBytes(&ThreadComPort.rxCantBytes, 1);
 80010ba:	2101      	movs	r1, #1
 80010bc:	4828      	ldr	r0, [pc, #160]	; (8001160 <ThreadComPort_Update+0x180>)
 80010be:	f7ff fecf 	bl	8000e60 <ReadBytes>
          ThreadComPort.rxParser = PARSER_DATA;
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <ThreadComPort_Update+0x17c>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        break;
 80010ca:	e01f      	b.n	800110c <ThreadComPort_Update+0x12c>
        case PARSER_DATA:
          if(ThreadComPort.CantBytesRead  >= ThreadComPort.rxCantBytes)
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <ThreadComPort_Update+0x17c>)
 80010ce:	885a      	ldrh	r2, [r3, #2]
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <ThreadComPort_Update+0x17c>)
 80010d2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d317      	bcc.n	800110a <ThreadComPort_Update+0x12a>
          {
            ReadBytes(ThreadComPort.rxBuf, ThreadComPort.rxCantBytes);
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <ThreadComPort_Update+0x17c>)
 80010dc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80010e0:	4619      	mov	r1, r3
 80010e2:	4820      	ldr	r0, [pc, #128]	; (8001164 <ThreadComPort_Update+0x184>)
 80010e4:	f7ff febc 	bl	8000e60 <ReadBytes>
            ThreadComPort.rxParser = PARSER_EOF;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <ThreadComPort_Update+0x17c>)
 80010ea:	2203      	movs	r2, #3
 80010ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          }

        break;
 80010f0:	e00b      	b.n	800110a <ThreadComPort_Update+0x12a>
        case PARSER_EOF:
          ReadBytes(&Dato, 1);
 80010f2:	1c7b      	adds	r3, r7, #1
 80010f4:	2101      	movs	r1, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff feb2 	bl	8000e60 <ReadBytes>
          if(Dato == EOF)
          {
            sciDataReceived(ThreadComPort.rxBuf);
          }
          ThreadComPort.rxParser = PARSER_PRINC;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <ThreadComPort_Update+0x17c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        break;
 8001104:	e002      	b.n	800110c <ThreadComPort_Update+0x12c>
        break;
 8001106:	bf00      	nop
 8001108:	e000      	b.n	800110c <ThreadComPort_Update+0x12c>
        break;
 800110a:	bf00      	nop
        }
        ThreadComPort.EstSciRv &= ~ERR_PUERTO;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <ThreadComPort_Update+0x17c>)
 800110e:	7c1b      	ldrb	r3, [r3, #16]
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <ThreadComPort_Update+0x17c>)
 8001118:	741a      	strb	r2, [r3, #16]
 800111a:	e012      	b.n	8001142 <ThreadComPort_Update+0x162>
      }
      else if(ThreadComPort.CantBytesRead  == 0)
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <ThreadComPort_Update+0x17c>)
 800111e:	885b      	ldrh	r3, [r3, #2]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d107      	bne.n	8001134 <ThreadComPort_Update+0x154>
      {
        ThreadComPort.EstSciRv &= ~ERR_PUERTO;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <ThreadComPort_Update+0x17c>)
 8001126:	7c1b      	ldrb	r3, [r3, #16]
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <ThreadComPort_Update+0x17c>)
 8001130:	741a      	strb	r2, [r3, #16]
 8001132:	e006      	b.n	8001142 <ThreadComPort_Update+0x162>
      }
      else
      {
        ThreadComPort.EstSciRv |= ERR_PUERTO;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <ThreadComPort_Update+0x17c>)
 8001136:	7c1b      	ldrb	r3, [r3, #16]
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <ThreadComPort_Update+0x17c>)
 8001140:	741a      	strb	r2, [r3, #16]
  for(int i = 0; i < 10; i++)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3301      	adds	r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b09      	cmp	r3, #9
 800114c:	f77f af4f 	ble.w	8000fee <ThreadComPort_Update+0xe>
      }
   }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800115c:	20000158 	.word	0x20000158
 8001160:	200001ce 	.word	0x200001ce
 8001164:	20000169 	.word	0x20000169

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <HAL_Init+0x40>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_Init+0x40>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_Init+0x40>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f90d 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fb4e 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f917 	bl	80013fe <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e8:	f000 f8ed 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	200001d8 	.word	0x200001d8

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200001d8 	.word	0x200001d8

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5c 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e159      	b.n	80016e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8148 	bne.w	80016e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a2 	beq.w	80016e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b57      	ldr	r3, [pc, #348]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a56      	ldr	r2, [pc, #344]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b54      	ldr	r3, [pc, #336]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x202>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2f4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x1fe>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	; (8001710 <HAL_GPIO_Init+0x2f8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x1fa>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_GPIO_Init+0x2fc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x1f6>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_GPIO_Init+0x300>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x1f2>
 8001606:	2304      	movs	r3, #4
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160a:	2307      	movs	r3, #7
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x204>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_GPIO_Init+0x304>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_GPIO_Init+0x304>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_GPIO_Init+0x304>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_GPIO_Init+0x304>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_GPIO_Init+0x304>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_GPIO_Init+0x304>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_GPIO_Init+0x304>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_GPIO_Init+0x304>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f aea2 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e0bb      	b.n	80018b4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800173c:	2201      	movs	r2, #1
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	429a      	cmp	r2, r3
 8001754:	f040 80ab 	bne.w	80018ae <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001758:	4a5c      	ldr	r2, [pc, #368]	; (80018cc <HAL_GPIO_DeInit+0x1ac>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	4013      	ands	r3, r2
 8001778:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a54      	ldr	r2, [pc, #336]	; (80018d0 <HAL_GPIO_DeInit+0x1b0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_DeInit+0x96>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a53      	ldr	r2, [pc, #332]	; (80018d4 <HAL_GPIO_DeInit+0x1b4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_DeInit+0x92>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_GPIO_DeInit+0x1b8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_DeInit+0x8e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a51      	ldr	r2, [pc, #324]	; (80018dc <HAL_GPIO_DeInit+0x1bc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_DeInit+0x8a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a50      	ldr	r2, [pc, #320]	; (80018e0 <HAL_GPIO_DeInit+0x1c0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_DeInit+0x86>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_DeInit+0x98>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_DeInit+0x98>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_DeInit+0x98>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_DeInit+0x98>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_DeInit+0x98>
 80017b6:	2300      	movs	r3, #0
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d132      	bne.n	800182e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_GPIO_DeInit+0x1c4>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4944      	ldr	r1, [pc, #272]	; (80018e4 <HAL_GPIO_DeInit+0x1c4>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017d6:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <HAL_GPIO_DeInit+0x1c4>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	4941      	ldr	r1, [pc, #260]	; (80018e4 <HAL_GPIO_DeInit+0x1c4>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_GPIO_DeInit+0x1c4>)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	493d      	ldr	r1, [pc, #244]	; (80018e4 <HAL_GPIO_DeInit+0x1c4>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <HAL_GPIO_DeInit+0x1c4>)
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	493a      	ldr	r1, [pc, #232]	; (80018e4 <HAL_GPIO_DeInit+0x1c4>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001810:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_GPIO_DeInit+0x1ac>)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	43da      	mvns	r2, r3
 8001820:	482a      	ldr	r0, [pc, #168]	; (80018cc <HAL_GPIO_DeInit+0x1ac>)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	400a      	ands	r2, r1
 8001828:	3302      	adds	r3, #2
 800182a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2103      	movs	r1, #3
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	08d2      	lsrs	r2, r2, #3
 8001864:	4019      	ands	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2103      	movs	r1, #3
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	2101      	movs	r1, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2103      	movs	r1, #3
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	f67f af40 	bls.w	800173c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40013800 	.word	0x40013800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020400 	.word	0x40020400
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40013c00 	.word	0x40013c00

080018e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e001      	b.n	800190a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800195c:	887a      	ldrh	r2, [r7, #2]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	041a      	lsls	r2, r3, #16
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43d9      	mvns	r1, r3
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	400b      	ands	r3, r1
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e267      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d075      	beq.n	8001a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d00c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019aa:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d112      	bne.n	80019dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c2:	d10b      	bne.n	80019dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	4b7e      	ldr	r3, [pc, #504]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05b      	beq.n	8001a88 <HAL_RCC_OscConfig+0x108>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d157      	bne.n	8001a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e242      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x74>
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xb0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6f      	ldr	r2, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6c      	ldr	r2, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xb0>
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a68      	ldr	r2, [pc, #416]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a65      	ldr	r2, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fbfc 	bl	8001234 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fbf8 	bl	8001234 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e207      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xc0>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fbe8 	bl	8001234 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fbe4 	bl	8001234 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1f3      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0xe8>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x152>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1c7      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_OscConfig+0x244>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fb9d 	bl	8001234 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff fb99 	bl	8001234 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1a8      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4925      	ldr	r1, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x244>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fb7c 	bl	8001234 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff fb78 	bl	8001234 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e187      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d016      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x248>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff fb5c 	bl	8001234 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fb58 	bl	8001234 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e167      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x200>
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x248>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb45 	bl	8001234 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e00e      	b.n	8001bcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fb41 	bl	8001234 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d907      	bls.n	8001bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e150      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ea      	bne.n	8001bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8097 	beq.w	8001d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b81      	ldr	r3, [pc, #516]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b7d      	ldr	r3, [pc, #500]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a7c      	ldr	r2, [pc, #496]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b7a      	ldr	r3, [pc, #488]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b77      	ldr	r3, [pc, #476]	; (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b74      	ldr	r3, [pc, #464]	; (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a73      	ldr	r2, [pc, #460]	; (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb01 	bl	8001234 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff fafd 	bl	8001234 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e10c      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2ea>
 8001c5c:	4b64      	ldr	r3, [pc, #400]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a63      	ldr	r2, [pc, #396]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x324>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x30c>
 8001c72:	4b5f      	ldr	r3, [pc, #380]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a5e      	ldr	r2, [pc, #376]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a5b      	ldr	r2, [pc, #364]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x324>
 8001c8c:	4b58      	ldr	r3, [pc, #352]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a54      	ldr	r2, [pc, #336]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff fac2 	bl	8001234 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fabe 	bl	8001234 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0cb      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff faac 	bl	8001234 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff faa8 	bl	8001234 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0b5      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a38      	ldr	r2, [pc, #224]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a1 	beq.w	8001e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d05c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d141      	bne.n	8001db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fa7c 	bl	8001234 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fa78 	bl	8001234 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e087      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	491b      	ldr	r1, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fa51 	bl	8001234 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff fa4d 	bl	8001234 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e05c      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x416>
 8001db4:	e054      	b.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fa3a 	bl	8001234 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff fa36 	bl	8001234 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e045      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
 8001de2:	e03d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e038      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000
 8001df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4ec>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d028      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d121      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d11a      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d111      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	3b01      	subs	r3, #1
 8001e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0cc      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d90c      	bls.n	8001eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b65      	ldr	r3, [pc, #404]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b8      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ece:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	494d      	ldr	r1, [pc, #308]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d044      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d119      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e067      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4934      	ldr	r1, [pc, #208]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f60:	f7ff f968 	bl	8001234 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7ff f964 	bl	8001234 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e04f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d20c      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e032      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4916      	ldr	r1, [pc, #88]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	490e      	ldr	r1, [pc, #56]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ff6:	f000 f821 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490a      	ldr	r1, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f8c8 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023c00 	.word	0x40023c00
 800202c:	40023800 	.word	0x40023800
 8002030:	0800341c 	.word	0x0800341c
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002040:	b094      	sub	sp, #80	; 0x50
 8002042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	647b      	str	r3, [r7, #68]	; 0x44
 8002048:	2300      	movs	r3, #0
 800204a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800204c:	2300      	movs	r3, #0
 800204e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002054:	4b79      	ldr	r3, [pc, #484]	; (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d00d      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x40>
 8002060:	2b08      	cmp	r3, #8
 8002062:	f200 80e1 	bhi.w	8002228 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x34>
 800206a:	2b04      	cmp	r3, #4
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x3a>
 800206e:	e0db      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_GetSysClockFreq+0x204>)
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002074:	e0db      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_GetSysClockFreq+0x208>)
 8002078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800207a:	e0d8      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800207c:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002086:	4b6d      	ldr	r3, [pc, #436]	; (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d063      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002092:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	2200      	movs	r2, #0
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
 800209c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
 80020a6:	2300      	movs	r3, #0
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
 80020aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020ae:	4622      	mov	r2, r4
 80020b0:	462b      	mov	r3, r5
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	0159      	lsls	r1, r3, #5
 80020bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c0:	0150      	lsls	r0, r2, #5
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4621      	mov	r1, r4
 80020c8:	1a51      	subs	r1, r2, r1
 80020ca:	6139      	str	r1, [r7, #16]
 80020cc:	4629      	mov	r1, r5
 80020ce:	eb63 0301 	sbc.w	r3, r3, r1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020e0:	4659      	mov	r1, fp
 80020e2:	018b      	lsls	r3, r1, #6
 80020e4:	4651      	mov	r1, sl
 80020e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ea:	4651      	mov	r1, sl
 80020ec:	018a      	lsls	r2, r1, #6
 80020ee:	4651      	mov	r1, sl
 80020f0:	ebb2 0801 	subs.w	r8, r2, r1
 80020f4:	4659      	mov	r1, fp
 80020f6:	eb63 0901 	sbc.w	r9, r3, r1
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800210e:	4690      	mov	r8, r2
 8002110:	4699      	mov	r9, r3
 8002112:	4623      	mov	r3, r4
 8002114:	eb18 0303 	adds.w	r3, r8, r3
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	462b      	mov	r3, r5
 800211c:	eb49 0303 	adc.w	r3, r9, r3
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800212e:	4629      	mov	r1, r5
 8002130:	024b      	lsls	r3, r1, #9
 8002132:	4621      	mov	r1, r4
 8002134:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002138:	4621      	mov	r1, r4
 800213a:	024a      	lsls	r2, r1, #9
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002142:	2200      	movs	r2, #0
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
 8002146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800214c:	f7fe f898 	bl	8000280 <__aeabi_uldivmod>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4613      	mov	r3, r2
 8002156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002158:	e058      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	2200      	movs	r2, #0
 8002162:	4618      	mov	r0, r3
 8002164:	4611      	mov	r1, r2
 8002166:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
 8002170:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002174:	4642      	mov	r2, r8
 8002176:	464b      	mov	r3, r9
 8002178:	f04f 0000 	mov.w	r0, #0
 800217c:	f04f 0100 	mov.w	r1, #0
 8002180:	0159      	lsls	r1, r3, #5
 8002182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002186:	0150      	lsls	r0, r2, #5
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4641      	mov	r1, r8
 800218e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002192:	4649      	mov	r1, r9
 8002194:	eb63 0b01 	sbc.w	fp, r3, r1
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021ac:	ebb2 040a 	subs.w	r4, r2, sl
 80021b0:	eb63 050b 	sbc.w	r5, r3, fp
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	00eb      	lsls	r3, r5, #3
 80021be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c2:	00e2      	lsls	r2, r4, #3
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	4643      	mov	r3, r8
 80021ca:	18e3      	adds	r3, r4, r3
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	464b      	mov	r3, r9
 80021d0:	eb45 0303 	adc.w	r3, r5, r3
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021e2:	4629      	mov	r1, r5
 80021e4:	028b      	lsls	r3, r1, #10
 80021e6:	4621      	mov	r1, r4
 80021e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021ec:	4621      	mov	r1, r4
 80021ee:	028a      	lsls	r2, r1, #10
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	2200      	movs	r2, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	61fa      	str	r2, [r7, #28]
 80021fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002200:	f7fe f83e 	bl	8000280 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4613      	mov	r3, r2
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_GetSysClockFreq+0x200>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800221c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800221e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002226:	e002      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetSysClockFreq+0x204>)
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800222c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002230:	4618      	mov	r0, r3
 8002232:	3750      	adds	r7, #80	; 0x50
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	00f42400 	.word	0x00f42400
 8002244:	007a1200 	.word	0x007a1200

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000000 	.word	0x20000000

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4903      	ldr	r1, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	0800342c 	.word	0x0800342c

08002288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800228c:	f7ff ffdc 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0b5b      	lsrs	r3, r3, #13
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4903      	ldr	r1, [pc, #12]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	0800342c 	.word	0x0800342c

080022b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e03f      	b.n	8002342 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fad8 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f957 	bl	80025a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e021      	b.n	80023a0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002372:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7fe fad1 	bl	800091c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d17c      	bne.n	80024c2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_UART_Transmit+0x2c>
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e075      	b.n	80024c4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Transmit+0x3e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e06e      	b.n	80024c4 <HAL_UART_Transmit+0x11c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2221      	movs	r2, #33	; 0x21
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023fc:	f7fe ff1a 	bl	8001234 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	88fa      	ldrh	r2, [r7, #6]
 8002406:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002416:	d108      	bne.n	800242a <HAL_UART_Transmit+0x82>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e003      	b.n	8002432 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800243a:	e02a      	b.n	8002492 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2200      	movs	r2, #0
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f840 	bl	80024cc <UART_WaitOnFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e036      	b.n	80024c4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800246a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	3302      	adds	r3, #2
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	e007      	b.n	8002484 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1cf      	bne.n	800243c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2200      	movs	r2, #0
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f810 	bl	80024cc <UART_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e006      	b.n	80024c4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
  }
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b090      	sub	sp, #64	; 0x40
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024dc:	e050      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e4:	d04c      	beq.n	8002580 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <UART_WaitOnFlagUntilTimeout+0x30>
 80024ec:	f7fe fea2 	bl	8001234 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d241      	bcs.n	8002580 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	330c      	adds	r3, #12
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	e853 3f00 	ldrex	r3, [r3]
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800251c:	637a      	str	r2, [r7, #52]	; 0x34
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002524:	e841 2300 	strex	r3, r2, [r1]
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e5      	bne.n	80024fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3314      	adds	r3, #20
 8002536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	e853 3f00 	ldrex	r3, [r3]
 800253e:	613b      	str	r3, [r7, #16]
   return(result);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3314      	adds	r3, #20
 800254e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002550:	623a      	str	r2, [r7, #32]
 8002552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	69f9      	ldr	r1, [r7, #28]
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	e841 2300 	strex	r3, r2, [r1]
 800255c:	61bb      	str	r3, [r7, #24]
   return(result);
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e5      	bne.n	8002530 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e00f      	b.n	80025a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4013      	ands	r3, r2
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	429a      	cmp	r2, r3
 800259c:	d09f      	beq.n	80024de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3740      	adds	r7, #64	; 0x40
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b0c0      	sub	sp, #256	; 0x100
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	ea40 0301 	orr.w	r3, r0, r1
 80025d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	431a      	orrs	r2, r3
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002600:	f021 010c 	bic.w	r1, r1, #12
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800260e:	430b      	orrs	r3, r1
 8002610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800261e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002622:	6999      	ldr	r1, [r3, #24]
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	ea40 0301 	orr.w	r3, r0, r1
 800262e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <UART_SetConfig+0x2cc>)
 8002638:	429a      	cmp	r2, r3
 800263a:	d005      	beq.n	8002648 <UART_SetConfig+0xa0>
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b8d      	ldr	r3, [pc, #564]	; (8002878 <UART_SetConfig+0x2d0>)
 8002644:	429a      	cmp	r2, r3
 8002646:	d104      	bne.n	8002652 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002648:	f7ff fe1e 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 800264c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002650:	e003      	b.n	800265a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002652:	f7ff fe05 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8002656:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002664:	f040 810c 	bne.w	8002880 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002672:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002676:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	1891      	adds	r1, r2, r2
 8002680:	65b9      	str	r1, [r7, #88]	; 0x58
 8002682:	415b      	adcs	r3, r3
 8002684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002686:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800268a:	4621      	mov	r1, r4
 800268c:	eb12 0801 	adds.w	r8, r2, r1
 8002690:	4629      	mov	r1, r5
 8002692:	eb43 0901 	adc.w	r9, r3, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026aa:	4690      	mov	r8, r2
 80026ac:	4699      	mov	r9, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	eb18 0303 	adds.w	r3, r8, r3
 80026b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026b8:	462b      	mov	r3, r5
 80026ba:	eb49 0303 	adc.w	r3, r9, r3
 80026be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026d6:	460b      	mov	r3, r1
 80026d8:	18db      	adds	r3, r3, r3
 80026da:	653b      	str	r3, [r7, #80]	; 0x50
 80026dc:	4613      	mov	r3, r2
 80026de:	eb42 0303 	adc.w	r3, r2, r3
 80026e2:	657b      	str	r3, [r7, #84]	; 0x54
 80026e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026ec:	f7fd fdc8 	bl	8000280 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4b61      	ldr	r3, [pc, #388]	; (800287c <UART_SetConfig+0x2d4>)
 80026f6:	fba3 2302 	umull	r2, r3, r3, r2
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	011c      	lsls	r4, r3, #4
 80026fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002708:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800270c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	1891      	adds	r1, r2, r2
 8002716:	64b9      	str	r1, [r7, #72]	; 0x48
 8002718:	415b      	adcs	r3, r3
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800271c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002720:	4641      	mov	r1, r8
 8002722:	eb12 0a01 	adds.w	sl, r2, r1
 8002726:	4649      	mov	r1, r9
 8002728:	eb43 0b01 	adc.w	fp, r3, r1
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002738:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800273c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002740:	4692      	mov	sl, r2
 8002742:	469b      	mov	fp, r3
 8002744:	4643      	mov	r3, r8
 8002746:	eb1a 0303 	adds.w	r3, sl, r3
 800274a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800274e:	464b      	mov	r3, r9
 8002750:	eb4b 0303 	adc.w	r3, fp, r3
 8002754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002764:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002768:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800276c:	460b      	mov	r3, r1
 800276e:	18db      	adds	r3, r3, r3
 8002770:	643b      	str	r3, [r7, #64]	; 0x40
 8002772:	4613      	mov	r3, r2
 8002774:	eb42 0303 	adc.w	r3, r2, r3
 8002778:	647b      	str	r3, [r7, #68]	; 0x44
 800277a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800277e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002782:	f7fd fd7d 	bl	8000280 <__aeabi_uldivmod>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4611      	mov	r1, r2
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <UART_SetConfig+0x2d4>)
 800278e:	fba3 2301 	umull	r2, r3, r3, r1
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2264      	movs	r2, #100	; 0x64
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	1acb      	subs	r3, r1, r3
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027a2:	4b36      	ldr	r3, [pc, #216]	; (800287c <UART_SetConfig+0x2d4>)
 80027a4:	fba3 2302 	umull	r2, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027b0:	441c      	add	r4, r3
 80027b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b6:	2200      	movs	r2, #0
 80027b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027c4:	4642      	mov	r2, r8
 80027c6:	464b      	mov	r3, r9
 80027c8:	1891      	adds	r1, r2, r2
 80027ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80027cc:	415b      	adcs	r3, r3
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027d4:	4641      	mov	r1, r8
 80027d6:	1851      	adds	r1, r2, r1
 80027d8:	6339      	str	r1, [r7, #48]	; 0x30
 80027da:	4649      	mov	r1, r9
 80027dc:	414b      	adcs	r3, r1
 80027de:	637b      	str	r3, [r7, #52]	; 0x34
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027ec:	4659      	mov	r1, fp
 80027ee:	00cb      	lsls	r3, r1, #3
 80027f0:	4651      	mov	r1, sl
 80027f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027f6:	4651      	mov	r1, sl
 80027f8:	00ca      	lsls	r2, r1, #3
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	4642      	mov	r2, r8
 8002802:	189b      	adds	r3, r3, r2
 8002804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002808:	464b      	mov	r3, r9
 800280a:	460a      	mov	r2, r1
 800280c:	eb42 0303 	adc.w	r3, r2, r3
 8002810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002820:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002828:	460b      	mov	r3, r1
 800282a:	18db      	adds	r3, r3, r3
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
 800282e:	4613      	mov	r3, r2
 8002830:	eb42 0303 	adc.w	r3, r2, r3
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800283a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800283e:	f7fd fd1f 	bl	8000280 <__aeabi_uldivmod>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <UART_SetConfig+0x2d4>)
 8002848:	fba3 1302 	umull	r1, r3, r3, r2
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	2164      	movs	r1, #100	; 0x64
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	3332      	adds	r3, #50	; 0x32
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <UART_SetConfig+0x2d4>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4422      	add	r2, r4
 800286e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002870:	e106      	b.n	8002a80 <UART_SetConfig+0x4d8>
 8002872:	bf00      	nop
 8002874:	40011000 	.word	0x40011000
 8002878:	40011400 	.word	0x40011400
 800287c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002884:	2200      	movs	r2, #0
 8002886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800288a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800288e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002892:	4642      	mov	r2, r8
 8002894:	464b      	mov	r3, r9
 8002896:	1891      	adds	r1, r2, r2
 8002898:	6239      	str	r1, [r7, #32]
 800289a:	415b      	adcs	r3, r3
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a2:	4641      	mov	r1, r8
 80028a4:	1854      	adds	r4, r2, r1
 80028a6:	4649      	mov	r1, r9
 80028a8:	eb43 0501 	adc.w	r5, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	00eb      	lsls	r3, r5, #3
 80028b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ba:	00e2      	lsls	r2, r4, #3
 80028bc:	4614      	mov	r4, r2
 80028be:	461d      	mov	r5, r3
 80028c0:	4643      	mov	r3, r8
 80028c2:	18e3      	adds	r3, r4, r3
 80028c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028c8:	464b      	mov	r3, r9
 80028ca:	eb45 0303 	adc.w	r3, r5, r3
 80028ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028ee:	4629      	mov	r1, r5
 80028f0:	008b      	lsls	r3, r1, #2
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028f8:	4621      	mov	r1, r4
 80028fa:	008a      	lsls	r2, r1, #2
 80028fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002900:	f7fd fcbe 	bl	8000280 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4b60      	ldr	r3, [pc, #384]	; (8002a8c <UART_SetConfig+0x4e4>)
 800290a:	fba3 2302 	umull	r2, r3, r3, r2
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	011c      	lsls	r4, r3, #4
 8002912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002916:	2200      	movs	r2, #0
 8002918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800291c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002920:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	1891      	adds	r1, r2, r2
 800292a:	61b9      	str	r1, [r7, #24]
 800292c:	415b      	adcs	r3, r3
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002934:	4641      	mov	r1, r8
 8002936:	1851      	adds	r1, r2, r1
 8002938:	6139      	str	r1, [r7, #16]
 800293a:	4649      	mov	r1, r9
 800293c:	414b      	adcs	r3, r1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294c:	4659      	mov	r1, fp
 800294e:	00cb      	lsls	r3, r1, #3
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002956:	4651      	mov	r1, sl
 8002958:	00ca      	lsls	r2, r1, #3
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	4603      	mov	r3, r0
 8002960:	4642      	mov	r2, r8
 8002962:	189b      	adds	r3, r3, r2
 8002964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002968:	464b      	mov	r3, r9
 800296a:	460a      	mov	r2, r1
 800296c:	eb42 0303 	adc.w	r3, r2, r3
 8002970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	67bb      	str	r3, [r7, #120]	; 0x78
 800297e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800298c:	4649      	mov	r1, r9
 800298e:	008b      	lsls	r3, r1, #2
 8002990:	4641      	mov	r1, r8
 8002992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002996:	4641      	mov	r1, r8
 8002998:	008a      	lsls	r2, r1, #2
 800299a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800299e:	f7fd fc6f 	bl	8000280 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <UART_SetConfig+0x4e4>)
 80029aa:	fba3 2301 	umull	r2, r3, r3, r1
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2264      	movs	r2, #100	; 0x64
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	1acb      	subs	r3, r1, r3
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	3332      	adds	r3, #50	; 0x32
 80029bc:	4a33      	ldr	r2, [pc, #204]	; (8002a8c <UART_SetConfig+0x4e4>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	441c      	add	r4, r3
 80029ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ce:	2200      	movs	r2, #0
 80029d0:	673b      	str	r3, [r7, #112]	; 0x70
 80029d2:	677a      	str	r2, [r7, #116]	; 0x74
 80029d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	415b      	adcs	r3, r3
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e8:	4641      	mov	r1, r8
 80029ea:	1851      	adds	r1, r2, r1
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	4649      	mov	r1, r9
 80029f0:	414b      	adcs	r3, r1
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a00:	4659      	mov	r1, fp
 8002a02:	00cb      	lsls	r3, r1, #3
 8002a04:	4651      	mov	r1, sl
 8002a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	00ca      	lsls	r2, r1, #3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	4642      	mov	r2, r8
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	eb42 0303 	adc.w	r3, r2, r3
 8002a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a2e:	667a      	str	r2, [r7, #100]	; 0x64
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	008b      	lsls	r3, r1, #2
 8002a40:	4641      	mov	r1, r8
 8002a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a46:	4641      	mov	r1, r8
 8002a48:	008a      	lsls	r2, r1, #2
 8002a4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a4e:	f7fd fc17 	bl	8000280 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <UART_SetConfig+0x4e4>)
 8002a58:	fba3 1302 	umull	r1, r3, r3, r2
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	2164      	movs	r1, #100	; 0x64
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	3332      	adds	r3, #50	; 0x32
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <UART_SetConfig+0x4e4>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4422      	add	r2, r4
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a86:	46bd      	mov	sp, r7
 8002a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8c:	51eb851f 	.word	0x51eb851f

08002a90 <siprintf>:
 8002a90:	b40e      	push	{r1, r2, r3}
 8002a92:	b500      	push	{lr}
 8002a94:	b09c      	sub	sp, #112	; 0x70
 8002a96:	ab1d      	add	r3, sp, #116	; 0x74
 8002a98:	9002      	str	r0, [sp, #8]
 8002a9a:	9006      	str	r0, [sp, #24]
 8002a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002aa0:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <siprintf+0x38>)
 8002aa2:	9107      	str	r1, [sp, #28]
 8002aa4:	9104      	str	r1, [sp, #16]
 8002aa6:	4909      	ldr	r1, [pc, #36]	; (8002acc <siprintf+0x3c>)
 8002aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002aac:	9105      	str	r1, [sp, #20]
 8002aae:	6800      	ldr	r0, [r0, #0]
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	a902      	add	r1, sp, #8
 8002ab4:	f000 f9a0 	bl	8002df8 <_svfiprintf_r>
 8002ab8:	9b02      	ldr	r3, [sp, #8]
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	b01c      	add	sp, #112	; 0x70
 8002ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ac4:	b003      	add	sp, #12
 8002ac6:	4770      	bx	lr
 8002ac8:	20000058 	.word	0x20000058
 8002acc:	ffff0208 	.word	0xffff0208

08002ad0 <memset>:
 8002ad0:	4402      	add	r2, r0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d100      	bne.n	8002ada <memset+0xa>
 8002ad8:	4770      	bx	lr
 8002ada:	f803 1b01 	strb.w	r1, [r3], #1
 8002ade:	e7f9      	b.n	8002ad4 <memset+0x4>

08002ae0 <__errno>:
 8002ae0:	4b01      	ldr	r3, [pc, #4]	; (8002ae8 <__errno+0x8>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000058 	.word	0x20000058

08002aec <__libc_init_array>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	4d0d      	ldr	r5, [pc, #52]	; (8002b24 <__libc_init_array+0x38>)
 8002af0:	4c0d      	ldr	r4, [pc, #52]	; (8002b28 <__libc_init_array+0x3c>)
 8002af2:	1b64      	subs	r4, r4, r5
 8002af4:	10a4      	asrs	r4, r4, #2
 8002af6:	2600      	movs	r6, #0
 8002af8:	42a6      	cmp	r6, r4
 8002afa:	d109      	bne.n	8002b10 <__libc_init_array+0x24>
 8002afc:	4d0b      	ldr	r5, [pc, #44]	; (8002b2c <__libc_init_array+0x40>)
 8002afe:	4c0c      	ldr	r4, [pc, #48]	; (8002b30 <__libc_init_array+0x44>)
 8002b00:	f000 fc6a 	bl	80033d8 <_init>
 8002b04:	1b64      	subs	r4, r4, r5
 8002b06:	10a4      	asrs	r4, r4, #2
 8002b08:	2600      	movs	r6, #0
 8002b0a:	42a6      	cmp	r6, r4
 8002b0c:	d105      	bne.n	8002b1a <__libc_init_array+0x2e>
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b14:	4798      	blx	r3
 8002b16:	3601      	adds	r6, #1
 8002b18:	e7ee      	b.n	8002af8 <__libc_init_array+0xc>
 8002b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1e:	4798      	blx	r3
 8002b20:	3601      	adds	r6, #1
 8002b22:	e7f2      	b.n	8002b0a <__libc_init_array+0x1e>
 8002b24:	08003470 	.word	0x08003470
 8002b28:	08003470 	.word	0x08003470
 8002b2c:	08003470 	.word	0x08003470
 8002b30:	08003474 	.word	0x08003474

08002b34 <__retarget_lock_acquire_recursive>:
 8002b34:	4770      	bx	lr

08002b36 <__retarget_lock_release_recursive>:
 8002b36:	4770      	bx	lr

08002b38 <memcpy>:
 8002b38:	440a      	add	r2, r1
 8002b3a:	4291      	cmp	r1, r2
 8002b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002b40:	d100      	bne.n	8002b44 <memcpy+0xc>
 8002b42:	4770      	bx	lr
 8002b44:	b510      	push	{r4, lr}
 8002b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b4e:	4291      	cmp	r1, r2
 8002b50:	d1f9      	bne.n	8002b46 <memcpy+0xe>
 8002b52:	bd10      	pop	{r4, pc}

08002b54 <_free_r>:
 8002b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b56:	2900      	cmp	r1, #0
 8002b58:	d044      	beq.n	8002be4 <_free_r+0x90>
 8002b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b5e:	9001      	str	r0, [sp, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f1a1 0404 	sub.w	r4, r1, #4
 8002b66:	bfb8      	it	lt
 8002b68:	18e4      	addlt	r4, r4, r3
 8002b6a:	f000 f8df 	bl	8002d2c <__malloc_lock>
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <_free_r+0x94>)
 8002b70:	9801      	ldr	r0, [sp, #4]
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	b933      	cbnz	r3, 8002b84 <_free_r+0x30>
 8002b76:	6063      	str	r3, [r4, #4]
 8002b78:	6014      	str	r4, [r2, #0]
 8002b7a:	b003      	add	sp, #12
 8002b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b80:	f000 b8da 	b.w	8002d38 <__malloc_unlock>
 8002b84:	42a3      	cmp	r3, r4
 8002b86:	d908      	bls.n	8002b9a <_free_r+0x46>
 8002b88:	6825      	ldr	r5, [r4, #0]
 8002b8a:	1961      	adds	r1, r4, r5
 8002b8c:	428b      	cmp	r3, r1
 8002b8e:	bf01      	itttt	eq
 8002b90:	6819      	ldreq	r1, [r3, #0]
 8002b92:	685b      	ldreq	r3, [r3, #4]
 8002b94:	1949      	addeq	r1, r1, r5
 8002b96:	6021      	streq	r1, [r4, #0]
 8002b98:	e7ed      	b.n	8002b76 <_free_r+0x22>
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	b10b      	cbz	r3, 8002ba4 <_free_r+0x50>
 8002ba0:	42a3      	cmp	r3, r4
 8002ba2:	d9fa      	bls.n	8002b9a <_free_r+0x46>
 8002ba4:	6811      	ldr	r1, [r2, #0]
 8002ba6:	1855      	adds	r5, r2, r1
 8002ba8:	42a5      	cmp	r5, r4
 8002baa:	d10b      	bne.n	8002bc4 <_free_r+0x70>
 8002bac:	6824      	ldr	r4, [r4, #0]
 8002bae:	4421      	add	r1, r4
 8002bb0:	1854      	adds	r4, r2, r1
 8002bb2:	42a3      	cmp	r3, r4
 8002bb4:	6011      	str	r1, [r2, #0]
 8002bb6:	d1e0      	bne.n	8002b7a <_free_r+0x26>
 8002bb8:	681c      	ldr	r4, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	6053      	str	r3, [r2, #4]
 8002bbe:	440c      	add	r4, r1
 8002bc0:	6014      	str	r4, [r2, #0]
 8002bc2:	e7da      	b.n	8002b7a <_free_r+0x26>
 8002bc4:	d902      	bls.n	8002bcc <_free_r+0x78>
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	6003      	str	r3, [r0, #0]
 8002bca:	e7d6      	b.n	8002b7a <_free_r+0x26>
 8002bcc:	6825      	ldr	r5, [r4, #0]
 8002bce:	1961      	adds	r1, r4, r5
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	bf04      	itt	eq
 8002bd4:	6819      	ldreq	r1, [r3, #0]
 8002bd6:	685b      	ldreq	r3, [r3, #4]
 8002bd8:	6063      	str	r3, [r4, #4]
 8002bda:	bf04      	itt	eq
 8002bdc:	1949      	addeq	r1, r1, r5
 8002bde:	6021      	streq	r1, [r4, #0]
 8002be0:	6054      	str	r4, [r2, #4]
 8002be2:	e7ca      	b.n	8002b7a <_free_r+0x26>
 8002be4:	b003      	add	sp, #12
 8002be6:	bd30      	pop	{r4, r5, pc}
 8002be8:	2000031c 	.word	0x2000031c

08002bec <sbrk_aligned>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	4e0e      	ldr	r6, [pc, #56]	; (8002c28 <sbrk_aligned+0x3c>)
 8002bf0:	460c      	mov	r4, r1
 8002bf2:	6831      	ldr	r1, [r6, #0]
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	b911      	cbnz	r1, 8002bfe <sbrk_aligned+0x12>
 8002bf8:	f000 fba6 	bl	8003348 <_sbrk_r>
 8002bfc:	6030      	str	r0, [r6, #0]
 8002bfe:	4621      	mov	r1, r4
 8002c00:	4628      	mov	r0, r5
 8002c02:	f000 fba1 	bl	8003348 <_sbrk_r>
 8002c06:	1c43      	adds	r3, r0, #1
 8002c08:	d00a      	beq.n	8002c20 <sbrk_aligned+0x34>
 8002c0a:	1cc4      	adds	r4, r0, #3
 8002c0c:	f024 0403 	bic.w	r4, r4, #3
 8002c10:	42a0      	cmp	r0, r4
 8002c12:	d007      	beq.n	8002c24 <sbrk_aligned+0x38>
 8002c14:	1a21      	subs	r1, r4, r0
 8002c16:	4628      	mov	r0, r5
 8002c18:	f000 fb96 	bl	8003348 <_sbrk_r>
 8002c1c:	3001      	adds	r0, #1
 8002c1e:	d101      	bne.n	8002c24 <sbrk_aligned+0x38>
 8002c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c24:	4620      	mov	r0, r4
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	20000320 	.word	0x20000320

08002c2c <_malloc_r>:
 8002c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c30:	1ccd      	adds	r5, r1, #3
 8002c32:	f025 0503 	bic.w	r5, r5, #3
 8002c36:	3508      	adds	r5, #8
 8002c38:	2d0c      	cmp	r5, #12
 8002c3a:	bf38      	it	cc
 8002c3c:	250c      	movcc	r5, #12
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	4607      	mov	r7, r0
 8002c42:	db01      	blt.n	8002c48 <_malloc_r+0x1c>
 8002c44:	42a9      	cmp	r1, r5
 8002c46:	d905      	bls.n	8002c54 <_malloc_r+0x28>
 8002c48:	230c      	movs	r3, #12
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	2600      	movs	r6, #0
 8002c4e:	4630      	mov	r0, r6
 8002c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d28 <_malloc_r+0xfc>
 8002c58:	f000 f868 	bl	8002d2c <__malloc_lock>
 8002c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c60:	461c      	mov	r4, r3
 8002c62:	bb5c      	cbnz	r4, 8002cbc <_malloc_r+0x90>
 8002c64:	4629      	mov	r1, r5
 8002c66:	4638      	mov	r0, r7
 8002c68:	f7ff ffc0 	bl	8002bec <sbrk_aligned>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	4604      	mov	r4, r0
 8002c70:	d155      	bne.n	8002d1e <_malloc_r+0xf2>
 8002c72:	f8d8 4000 	ldr.w	r4, [r8]
 8002c76:	4626      	mov	r6, r4
 8002c78:	2e00      	cmp	r6, #0
 8002c7a:	d145      	bne.n	8002d08 <_malloc_r+0xdc>
 8002c7c:	2c00      	cmp	r4, #0
 8002c7e:	d048      	beq.n	8002d12 <_malloc_r+0xe6>
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	4631      	mov	r1, r6
 8002c84:	4638      	mov	r0, r7
 8002c86:	eb04 0903 	add.w	r9, r4, r3
 8002c8a:	f000 fb5d 	bl	8003348 <_sbrk_r>
 8002c8e:	4581      	cmp	r9, r0
 8002c90:	d13f      	bne.n	8002d12 <_malloc_r+0xe6>
 8002c92:	6821      	ldr	r1, [r4, #0]
 8002c94:	1a6d      	subs	r5, r5, r1
 8002c96:	4629      	mov	r1, r5
 8002c98:	4638      	mov	r0, r7
 8002c9a:	f7ff ffa7 	bl	8002bec <sbrk_aligned>
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d037      	beq.n	8002d12 <_malloc_r+0xe6>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	442b      	add	r3, r5
 8002ca6:	6023      	str	r3, [r4, #0]
 8002ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d038      	beq.n	8002d22 <_malloc_r+0xf6>
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	42a2      	cmp	r2, r4
 8002cb4:	d12b      	bne.n	8002d0e <_malloc_r+0xe2>
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e00f      	b.n	8002cdc <_malloc_r+0xb0>
 8002cbc:	6822      	ldr	r2, [r4, #0]
 8002cbe:	1b52      	subs	r2, r2, r5
 8002cc0:	d41f      	bmi.n	8002d02 <_malloc_r+0xd6>
 8002cc2:	2a0b      	cmp	r2, #11
 8002cc4:	d917      	bls.n	8002cf6 <_malloc_r+0xca>
 8002cc6:	1961      	adds	r1, r4, r5
 8002cc8:	42a3      	cmp	r3, r4
 8002cca:	6025      	str	r5, [r4, #0]
 8002ccc:	bf18      	it	ne
 8002cce:	6059      	strne	r1, [r3, #4]
 8002cd0:	6863      	ldr	r3, [r4, #4]
 8002cd2:	bf08      	it	eq
 8002cd4:	f8c8 1000 	streq.w	r1, [r8]
 8002cd8:	5162      	str	r2, [r4, r5]
 8002cda:	604b      	str	r3, [r1, #4]
 8002cdc:	4638      	mov	r0, r7
 8002cde:	f104 060b 	add.w	r6, r4, #11
 8002ce2:	f000 f829 	bl	8002d38 <__malloc_unlock>
 8002ce6:	f026 0607 	bic.w	r6, r6, #7
 8002cea:	1d23      	adds	r3, r4, #4
 8002cec:	1af2      	subs	r2, r6, r3
 8002cee:	d0ae      	beq.n	8002c4e <_malloc_r+0x22>
 8002cf0:	1b9b      	subs	r3, r3, r6
 8002cf2:	50a3      	str	r3, [r4, r2]
 8002cf4:	e7ab      	b.n	8002c4e <_malloc_r+0x22>
 8002cf6:	42a3      	cmp	r3, r4
 8002cf8:	6862      	ldr	r2, [r4, #4]
 8002cfa:	d1dd      	bne.n	8002cb8 <_malloc_r+0x8c>
 8002cfc:	f8c8 2000 	str.w	r2, [r8]
 8002d00:	e7ec      	b.n	8002cdc <_malloc_r+0xb0>
 8002d02:	4623      	mov	r3, r4
 8002d04:	6864      	ldr	r4, [r4, #4]
 8002d06:	e7ac      	b.n	8002c62 <_malloc_r+0x36>
 8002d08:	4634      	mov	r4, r6
 8002d0a:	6876      	ldr	r6, [r6, #4]
 8002d0c:	e7b4      	b.n	8002c78 <_malloc_r+0x4c>
 8002d0e:	4613      	mov	r3, r2
 8002d10:	e7cc      	b.n	8002cac <_malloc_r+0x80>
 8002d12:	230c      	movs	r3, #12
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4638      	mov	r0, r7
 8002d18:	f000 f80e 	bl	8002d38 <__malloc_unlock>
 8002d1c:	e797      	b.n	8002c4e <_malloc_r+0x22>
 8002d1e:	6025      	str	r5, [r4, #0]
 8002d20:	e7dc      	b.n	8002cdc <_malloc_r+0xb0>
 8002d22:	605b      	str	r3, [r3, #4]
 8002d24:	deff      	udf	#255	; 0xff
 8002d26:	bf00      	nop
 8002d28:	2000031c 	.word	0x2000031c

08002d2c <__malloc_lock>:
 8002d2c:	4801      	ldr	r0, [pc, #4]	; (8002d34 <__malloc_lock+0x8>)
 8002d2e:	f7ff bf01 	b.w	8002b34 <__retarget_lock_acquire_recursive>
 8002d32:	bf00      	nop
 8002d34:	20000318 	.word	0x20000318

08002d38 <__malloc_unlock>:
 8002d38:	4801      	ldr	r0, [pc, #4]	; (8002d40 <__malloc_unlock+0x8>)
 8002d3a:	f7ff befc 	b.w	8002b36 <__retarget_lock_release_recursive>
 8002d3e:	bf00      	nop
 8002d40:	20000318 	.word	0x20000318

08002d44 <__ssputs_r>:
 8002d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d48:	688e      	ldr	r6, [r1, #8]
 8002d4a:	461f      	mov	r7, r3
 8002d4c:	42be      	cmp	r6, r7
 8002d4e:	680b      	ldr	r3, [r1, #0]
 8002d50:	4682      	mov	sl, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	4690      	mov	r8, r2
 8002d56:	d82c      	bhi.n	8002db2 <__ssputs_r+0x6e>
 8002d58:	898a      	ldrh	r2, [r1, #12]
 8002d5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d5e:	d026      	beq.n	8002dae <__ssputs_r+0x6a>
 8002d60:	6965      	ldr	r5, [r4, #20]
 8002d62:	6909      	ldr	r1, [r1, #16]
 8002d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d68:	eba3 0901 	sub.w	r9, r3, r1
 8002d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d70:	1c7b      	adds	r3, r7, #1
 8002d72:	444b      	add	r3, r9
 8002d74:	106d      	asrs	r5, r5, #1
 8002d76:	429d      	cmp	r5, r3
 8002d78:	bf38      	it	cc
 8002d7a:	461d      	movcc	r5, r3
 8002d7c:	0553      	lsls	r3, r2, #21
 8002d7e:	d527      	bpl.n	8002dd0 <__ssputs_r+0x8c>
 8002d80:	4629      	mov	r1, r5
 8002d82:	f7ff ff53 	bl	8002c2c <_malloc_r>
 8002d86:	4606      	mov	r6, r0
 8002d88:	b360      	cbz	r0, 8002de4 <__ssputs_r+0xa0>
 8002d8a:	6921      	ldr	r1, [r4, #16]
 8002d8c:	464a      	mov	r2, r9
 8002d8e:	f7ff fed3 	bl	8002b38 <memcpy>
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	6126      	str	r6, [r4, #16]
 8002da0:	6165      	str	r5, [r4, #20]
 8002da2:	444e      	add	r6, r9
 8002da4:	eba5 0509 	sub.w	r5, r5, r9
 8002da8:	6026      	str	r6, [r4, #0]
 8002daa:	60a5      	str	r5, [r4, #8]
 8002dac:	463e      	mov	r6, r7
 8002dae:	42be      	cmp	r6, r7
 8002db0:	d900      	bls.n	8002db4 <__ssputs_r+0x70>
 8002db2:	463e      	mov	r6, r7
 8002db4:	6820      	ldr	r0, [r4, #0]
 8002db6:	4632      	mov	r2, r6
 8002db8:	4641      	mov	r1, r8
 8002dba:	f000 faab 	bl	8003314 <memmove>
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	1b9b      	subs	r3, r3, r6
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	4433      	add	r3, r6
 8002dc8:	6023      	str	r3, [r4, #0]
 8002dca:	2000      	movs	r0, #0
 8002dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd0:	462a      	mov	r2, r5
 8002dd2:	f000 fac9 	bl	8003368 <_realloc_r>
 8002dd6:	4606      	mov	r6, r0
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d1e0      	bne.n	8002d9e <__ssputs_r+0x5a>
 8002ddc:	6921      	ldr	r1, [r4, #16]
 8002dde:	4650      	mov	r0, sl
 8002de0:	f7ff feb8 	bl	8002b54 <_free_r>
 8002de4:	230c      	movs	r3, #12
 8002de6:	f8ca 3000 	str.w	r3, [sl]
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002df6:	e7e9      	b.n	8002dcc <__ssputs_r+0x88>

08002df8 <_svfiprintf_r>:
 8002df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfc:	4698      	mov	r8, r3
 8002dfe:	898b      	ldrh	r3, [r1, #12]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	b09d      	sub	sp, #116	; 0x74
 8002e04:	4607      	mov	r7, r0
 8002e06:	460d      	mov	r5, r1
 8002e08:	4614      	mov	r4, r2
 8002e0a:	d50e      	bpl.n	8002e2a <_svfiprintf_r+0x32>
 8002e0c:	690b      	ldr	r3, [r1, #16]
 8002e0e:	b963      	cbnz	r3, 8002e2a <_svfiprintf_r+0x32>
 8002e10:	2140      	movs	r1, #64	; 0x40
 8002e12:	f7ff ff0b 	bl	8002c2c <_malloc_r>
 8002e16:	6028      	str	r0, [r5, #0]
 8002e18:	6128      	str	r0, [r5, #16]
 8002e1a:	b920      	cbnz	r0, 8002e26 <_svfiprintf_r+0x2e>
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e24:	e0d0      	b.n	8002fc8 <_svfiprintf_r+0x1d0>
 8002e26:	2340      	movs	r3, #64	; 0x40
 8002e28:	616b      	str	r3, [r5, #20]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e2e:	2320      	movs	r3, #32
 8002e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e38:	2330      	movs	r3, #48	; 0x30
 8002e3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002fe0 <_svfiprintf_r+0x1e8>
 8002e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e42:	f04f 0901 	mov.w	r9, #1
 8002e46:	4623      	mov	r3, r4
 8002e48:	469a      	mov	sl, r3
 8002e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e4e:	b10a      	cbz	r2, 8002e54 <_svfiprintf_r+0x5c>
 8002e50:	2a25      	cmp	r2, #37	; 0x25
 8002e52:	d1f9      	bne.n	8002e48 <_svfiprintf_r+0x50>
 8002e54:	ebba 0b04 	subs.w	fp, sl, r4
 8002e58:	d00b      	beq.n	8002e72 <_svfiprintf_r+0x7a>
 8002e5a:	465b      	mov	r3, fp
 8002e5c:	4622      	mov	r2, r4
 8002e5e:	4629      	mov	r1, r5
 8002e60:	4638      	mov	r0, r7
 8002e62:	f7ff ff6f 	bl	8002d44 <__ssputs_r>
 8002e66:	3001      	adds	r0, #1
 8002e68:	f000 80a9 	beq.w	8002fbe <_svfiprintf_r+0x1c6>
 8002e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e6e:	445a      	add	r2, fp
 8002e70:	9209      	str	r2, [sp, #36]	; 0x24
 8002e72:	f89a 3000 	ldrb.w	r3, [sl]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80a1 	beq.w	8002fbe <_svfiprintf_r+0x1c6>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e86:	f10a 0a01 	add.w	sl, sl, #1
 8002e8a:	9304      	str	r3, [sp, #16]
 8002e8c:	9307      	str	r3, [sp, #28]
 8002e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e92:	931a      	str	r3, [sp, #104]	; 0x68
 8002e94:	4654      	mov	r4, sl
 8002e96:	2205      	movs	r2, #5
 8002e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e9c:	4850      	ldr	r0, [pc, #320]	; (8002fe0 <_svfiprintf_r+0x1e8>)
 8002e9e:	f7fd f99f 	bl	80001e0 <memchr>
 8002ea2:	9a04      	ldr	r2, [sp, #16]
 8002ea4:	b9d8      	cbnz	r0, 8002ede <_svfiprintf_r+0xe6>
 8002ea6:	06d0      	lsls	r0, r2, #27
 8002ea8:	bf44      	itt	mi
 8002eaa:	2320      	movmi	r3, #32
 8002eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002eb0:	0711      	lsls	r1, r2, #28
 8002eb2:	bf44      	itt	mi
 8002eb4:	232b      	movmi	r3, #43	; 0x2b
 8002eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002eba:	f89a 3000 	ldrb.w	r3, [sl]
 8002ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec0:	d015      	beq.n	8002eee <_svfiprintf_r+0xf6>
 8002ec2:	9a07      	ldr	r2, [sp, #28]
 8002ec4:	4654      	mov	r4, sl
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f04f 0c0a 	mov.w	ip, #10
 8002ecc:	4621      	mov	r1, r4
 8002ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ed2:	3b30      	subs	r3, #48	; 0x30
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d94d      	bls.n	8002f74 <_svfiprintf_r+0x17c>
 8002ed8:	b1b0      	cbz	r0, 8002f08 <_svfiprintf_r+0x110>
 8002eda:	9207      	str	r2, [sp, #28]
 8002edc:	e014      	b.n	8002f08 <_svfiprintf_r+0x110>
 8002ede:	eba0 0308 	sub.w	r3, r0, r8
 8002ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	9304      	str	r3, [sp, #16]
 8002eea:	46a2      	mov	sl, r4
 8002eec:	e7d2      	b.n	8002e94 <_svfiprintf_r+0x9c>
 8002eee:	9b03      	ldr	r3, [sp, #12]
 8002ef0:	1d19      	adds	r1, r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	9103      	str	r1, [sp, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bfbb      	ittet	lt
 8002efa:	425b      	neglt	r3, r3
 8002efc:	f042 0202 	orrlt.w	r2, r2, #2
 8002f00:	9307      	strge	r3, [sp, #28]
 8002f02:	9307      	strlt	r3, [sp, #28]
 8002f04:	bfb8      	it	lt
 8002f06:	9204      	strlt	r2, [sp, #16]
 8002f08:	7823      	ldrb	r3, [r4, #0]
 8002f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f0c:	d10c      	bne.n	8002f28 <_svfiprintf_r+0x130>
 8002f0e:	7863      	ldrb	r3, [r4, #1]
 8002f10:	2b2a      	cmp	r3, #42	; 0x2a
 8002f12:	d134      	bne.n	8002f7e <_svfiprintf_r+0x186>
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	1d1a      	adds	r2, r3, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	9203      	str	r2, [sp, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bfb8      	it	lt
 8002f20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002f24:	3402      	adds	r4, #2
 8002f26:	9305      	str	r3, [sp, #20]
 8002f28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002ff0 <_svfiprintf_r+0x1f8>
 8002f2c:	7821      	ldrb	r1, [r4, #0]
 8002f2e:	2203      	movs	r2, #3
 8002f30:	4650      	mov	r0, sl
 8002f32:	f7fd f955 	bl	80001e0 <memchr>
 8002f36:	b138      	cbz	r0, 8002f48 <_svfiprintf_r+0x150>
 8002f38:	9b04      	ldr	r3, [sp, #16]
 8002f3a:	eba0 000a 	sub.w	r0, r0, sl
 8002f3e:	2240      	movs	r2, #64	; 0x40
 8002f40:	4082      	lsls	r2, r0
 8002f42:	4313      	orrs	r3, r2
 8002f44:	3401      	adds	r4, #1
 8002f46:	9304      	str	r3, [sp, #16]
 8002f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f4c:	4825      	ldr	r0, [pc, #148]	; (8002fe4 <_svfiprintf_r+0x1ec>)
 8002f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f52:	2206      	movs	r2, #6
 8002f54:	f7fd f944 	bl	80001e0 <memchr>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d038      	beq.n	8002fce <_svfiprintf_r+0x1d6>
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <_svfiprintf_r+0x1f0>)
 8002f5e:	bb1b      	cbnz	r3, 8002fa8 <_svfiprintf_r+0x1b0>
 8002f60:	9b03      	ldr	r3, [sp, #12]
 8002f62:	3307      	adds	r3, #7
 8002f64:	f023 0307 	bic.w	r3, r3, #7
 8002f68:	3308      	adds	r3, #8
 8002f6a:	9303      	str	r3, [sp, #12]
 8002f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f6e:	4433      	add	r3, r6
 8002f70:	9309      	str	r3, [sp, #36]	; 0x24
 8002f72:	e768      	b.n	8002e46 <_svfiprintf_r+0x4e>
 8002f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f78:	460c      	mov	r4, r1
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	e7a6      	b.n	8002ecc <_svfiprintf_r+0xd4>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	3401      	adds	r4, #1
 8002f82:	9305      	str	r3, [sp, #20]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f04f 0c0a 	mov.w	ip, #10
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f90:	3a30      	subs	r2, #48	; 0x30
 8002f92:	2a09      	cmp	r2, #9
 8002f94:	d903      	bls.n	8002f9e <_svfiprintf_r+0x1a6>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0c6      	beq.n	8002f28 <_svfiprintf_r+0x130>
 8002f9a:	9105      	str	r1, [sp, #20]
 8002f9c:	e7c4      	b.n	8002f28 <_svfiprintf_r+0x130>
 8002f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e7f0      	b.n	8002f8a <_svfiprintf_r+0x192>
 8002fa8:	ab03      	add	r3, sp, #12
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	462a      	mov	r2, r5
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <_svfiprintf_r+0x1f4>)
 8002fb0:	a904      	add	r1, sp, #16
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	1c42      	adds	r2, r0, #1
 8002fba:	4606      	mov	r6, r0
 8002fbc:	d1d6      	bne.n	8002f6c <_svfiprintf_r+0x174>
 8002fbe:	89ab      	ldrh	r3, [r5, #12]
 8002fc0:	065b      	lsls	r3, r3, #25
 8002fc2:	f53f af2d 	bmi.w	8002e20 <_svfiprintf_r+0x28>
 8002fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fc8:	b01d      	add	sp, #116	; 0x74
 8002fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fce:	ab03      	add	r3, sp, #12
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	462a      	mov	r2, r5
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <_svfiprintf_r+0x1f4>)
 8002fd6:	a904      	add	r1, sp, #16
 8002fd8:	4638      	mov	r0, r7
 8002fda:	f000 f879 	bl	80030d0 <_printf_i>
 8002fde:	e7eb      	b.n	8002fb8 <_svfiprintf_r+0x1c0>
 8002fe0:	08003434 	.word	0x08003434
 8002fe4:	0800343e 	.word	0x0800343e
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	08002d45 	.word	0x08002d45
 8002ff0:	0800343a 	.word	0x0800343a

08002ff4 <_printf_common>:
 8002ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff8:	4616      	mov	r6, r2
 8002ffa:	4699      	mov	r9, r3
 8002ffc:	688a      	ldr	r2, [r1, #8]
 8002ffe:	690b      	ldr	r3, [r1, #16]
 8003000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003004:	4293      	cmp	r3, r2
 8003006:	bfb8      	it	lt
 8003008:	4613      	movlt	r3, r2
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003010:	4607      	mov	r7, r0
 8003012:	460c      	mov	r4, r1
 8003014:	b10a      	cbz	r2, 800301a <_printf_common+0x26>
 8003016:	3301      	adds	r3, #1
 8003018:	6033      	str	r3, [r6, #0]
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	0699      	lsls	r1, r3, #26
 800301e:	bf42      	ittt	mi
 8003020:	6833      	ldrmi	r3, [r6, #0]
 8003022:	3302      	addmi	r3, #2
 8003024:	6033      	strmi	r3, [r6, #0]
 8003026:	6825      	ldr	r5, [r4, #0]
 8003028:	f015 0506 	ands.w	r5, r5, #6
 800302c:	d106      	bne.n	800303c <_printf_common+0x48>
 800302e:	f104 0a19 	add.w	sl, r4, #25
 8003032:	68e3      	ldr	r3, [r4, #12]
 8003034:	6832      	ldr	r2, [r6, #0]
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	42ab      	cmp	r3, r5
 800303a:	dc26      	bgt.n	800308a <_printf_common+0x96>
 800303c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003040:	1e13      	subs	r3, r2, #0
 8003042:	6822      	ldr	r2, [r4, #0]
 8003044:	bf18      	it	ne
 8003046:	2301      	movne	r3, #1
 8003048:	0692      	lsls	r2, r2, #26
 800304a:	d42b      	bmi.n	80030a4 <_printf_common+0xb0>
 800304c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003050:	4649      	mov	r1, r9
 8003052:	4638      	mov	r0, r7
 8003054:	47c0      	blx	r8
 8003056:	3001      	adds	r0, #1
 8003058:	d01e      	beq.n	8003098 <_printf_common+0xa4>
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	6922      	ldr	r2, [r4, #16]
 800305e:	f003 0306 	and.w	r3, r3, #6
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf02      	ittt	eq
 8003066:	68e5      	ldreq	r5, [r4, #12]
 8003068:	6833      	ldreq	r3, [r6, #0]
 800306a:	1aed      	subeq	r5, r5, r3
 800306c:	68a3      	ldr	r3, [r4, #8]
 800306e:	bf0c      	ite	eq
 8003070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003074:	2500      	movne	r5, #0
 8003076:	4293      	cmp	r3, r2
 8003078:	bfc4      	itt	gt
 800307a:	1a9b      	subgt	r3, r3, r2
 800307c:	18ed      	addgt	r5, r5, r3
 800307e:	2600      	movs	r6, #0
 8003080:	341a      	adds	r4, #26
 8003082:	42b5      	cmp	r5, r6
 8003084:	d11a      	bne.n	80030bc <_printf_common+0xc8>
 8003086:	2000      	movs	r0, #0
 8003088:	e008      	b.n	800309c <_printf_common+0xa8>
 800308a:	2301      	movs	r3, #1
 800308c:	4652      	mov	r2, sl
 800308e:	4649      	mov	r1, r9
 8003090:	4638      	mov	r0, r7
 8003092:	47c0      	blx	r8
 8003094:	3001      	adds	r0, #1
 8003096:	d103      	bne.n	80030a0 <_printf_common+0xac>
 8003098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800309c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a0:	3501      	adds	r5, #1
 80030a2:	e7c6      	b.n	8003032 <_printf_common+0x3e>
 80030a4:	18e1      	adds	r1, r4, r3
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	2030      	movs	r0, #48	; 0x30
 80030aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030ae:	4422      	add	r2, r4
 80030b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030b8:	3302      	adds	r3, #2
 80030ba:	e7c7      	b.n	800304c <_printf_common+0x58>
 80030bc:	2301      	movs	r3, #1
 80030be:	4622      	mov	r2, r4
 80030c0:	4649      	mov	r1, r9
 80030c2:	4638      	mov	r0, r7
 80030c4:	47c0      	blx	r8
 80030c6:	3001      	adds	r0, #1
 80030c8:	d0e6      	beq.n	8003098 <_printf_common+0xa4>
 80030ca:	3601      	adds	r6, #1
 80030cc:	e7d9      	b.n	8003082 <_printf_common+0x8e>
	...

080030d0 <_printf_i>:
 80030d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030d4:	7e0f      	ldrb	r7, [r1, #24]
 80030d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030d8:	2f78      	cmp	r7, #120	; 0x78
 80030da:	4691      	mov	r9, r2
 80030dc:	4680      	mov	r8, r0
 80030de:	460c      	mov	r4, r1
 80030e0:	469a      	mov	sl, r3
 80030e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030e6:	d807      	bhi.n	80030f8 <_printf_i+0x28>
 80030e8:	2f62      	cmp	r7, #98	; 0x62
 80030ea:	d80a      	bhi.n	8003102 <_printf_i+0x32>
 80030ec:	2f00      	cmp	r7, #0
 80030ee:	f000 80d4 	beq.w	800329a <_printf_i+0x1ca>
 80030f2:	2f58      	cmp	r7, #88	; 0x58
 80030f4:	f000 80c0 	beq.w	8003278 <_printf_i+0x1a8>
 80030f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003100:	e03a      	b.n	8003178 <_printf_i+0xa8>
 8003102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003106:	2b15      	cmp	r3, #21
 8003108:	d8f6      	bhi.n	80030f8 <_printf_i+0x28>
 800310a:	a101      	add	r1, pc, #4	; (adr r1, 8003110 <_printf_i+0x40>)
 800310c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003110:	08003169 	.word	0x08003169
 8003114:	0800317d 	.word	0x0800317d
 8003118:	080030f9 	.word	0x080030f9
 800311c:	080030f9 	.word	0x080030f9
 8003120:	080030f9 	.word	0x080030f9
 8003124:	080030f9 	.word	0x080030f9
 8003128:	0800317d 	.word	0x0800317d
 800312c:	080030f9 	.word	0x080030f9
 8003130:	080030f9 	.word	0x080030f9
 8003134:	080030f9 	.word	0x080030f9
 8003138:	080030f9 	.word	0x080030f9
 800313c:	08003281 	.word	0x08003281
 8003140:	080031a9 	.word	0x080031a9
 8003144:	0800323b 	.word	0x0800323b
 8003148:	080030f9 	.word	0x080030f9
 800314c:	080030f9 	.word	0x080030f9
 8003150:	080032a3 	.word	0x080032a3
 8003154:	080030f9 	.word	0x080030f9
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080030f9 	.word	0x080030f9
 8003160:	080030f9 	.word	0x080030f9
 8003164:	08003243 	.word	0x08003243
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	1d1a      	adds	r2, r3, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	602a      	str	r2, [r5, #0]
 8003170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003178:	2301      	movs	r3, #1
 800317a:	e09f      	b.n	80032bc <_printf_i+0x1ec>
 800317c:	6820      	ldr	r0, [r4, #0]
 800317e:	682b      	ldr	r3, [r5, #0]
 8003180:	0607      	lsls	r7, r0, #24
 8003182:	f103 0104 	add.w	r1, r3, #4
 8003186:	6029      	str	r1, [r5, #0]
 8003188:	d501      	bpl.n	800318e <_printf_i+0xbe>
 800318a:	681e      	ldr	r6, [r3, #0]
 800318c:	e003      	b.n	8003196 <_printf_i+0xc6>
 800318e:	0646      	lsls	r6, r0, #25
 8003190:	d5fb      	bpl.n	800318a <_printf_i+0xba>
 8003192:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003196:	2e00      	cmp	r6, #0
 8003198:	da03      	bge.n	80031a2 <_printf_i+0xd2>
 800319a:	232d      	movs	r3, #45	; 0x2d
 800319c:	4276      	negs	r6, r6
 800319e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a2:	485a      	ldr	r0, [pc, #360]	; (800330c <_printf_i+0x23c>)
 80031a4:	230a      	movs	r3, #10
 80031a6:	e012      	b.n	80031ce <_printf_i+0xfe>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	6820      	ldr	r0, [r4, #0]
 80031ac:	1d19      	adds	r1, r3, #4
 80031ae:	6029      	str	r1, [r5, #0]
 80031b0:	0605      	lsls	r5, r0, #24
 80031b2:	d501      	bpl.n	80031b8 <_printf_i+0xe8>
 80031b4:	681e      	ldr	r6, [r3, #0]
 80031b6:	e002      	b.n	80031be <_printf_i+0xee>
 80031b8:	0641      	lsls	r1, r0, #25
 80031ba:	d5fb      	bpl.n	80031b4 <_printf_i+0xe4>
 80031bc:	881e      	ldrh	r6, [r3, #0]
 80031be:	4853      	ldr	r0, [pc, #332]	; (800330c <_printf_i+0x23c>)
 80031c0:	2f6f      	cmp	r7, #111	; 0x6f
 80031c2:	bf0c      	ite	eq
 80031c4:	2308      	moveq	r3, #8
 80031c6:	230a      	movne	r3, #10
 80031c8:	2100      	movs	r1, #0
 80031ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031ce:	6865      	ldr	r5, [r4, #4]
 80031d0:	60a5      	str	r5, [r4, #8]
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	bfa2      	ittt	ge
 80031d6:	6821      	ldrge	r1, [r4, #0]
 80031d8:	f021 0104 	bicge.w	r1, r1, #4
 80031dc:	6021      	strge	r1, [r4, #0]
 80031de:	b90e      	cbnz	r6, 80031e4 <_printf_i+0x114>
 80031e0:	2d00      	cmp	r5, #0
 80031e2:	d04b      	beq.n	800327c <_printf_i+0x1ac>
 80031e4:	4615      	mov	r5, r2
 80031e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80031ea:	fb03 6711 	mls	r7, r3, r1, r6
 80031ee:	5dc7      	ldrb	r7, [r0, r7]
 80031f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031f4:	4637      	mov	r7, r6
 80031f6:	42bb      	cmp	r3, r7
 80031f8:	460e      	mov	r6, r1
 80031fa:	d9f4      	bls.n	80031e6 <_printf_i+0x116>
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d10b      	bne.n	8003218 <_printf_i+0x148>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	07de      	lsls	r6, r3, #31
 8003204:	d508      	bpl.n	8003218 <_printf_i+0x148>
 8003206:	6923      	ldr	r3, [r4, #16]
 8003208:	6861      	ldr	r1, [r4, #4]
 800320a:	4299      	cmp	r1, r3
 800320c:	bfde      	ittt	le
 800320e:	2330      	movle	r3, #48	; 0x30
 8003210:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003214:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003218:	1b52      	subs	r2, r2, r5
 800321a:	6122      	str	r2, [r4, #16]
 800321c:	f8cd a000 	str.w	sl, [sp]
 8003220:	464b      	mov	r3, r9
 8003222:	aa03      	add	r2, sp, #12
 8003224:	4621      	mov	r1, r4
 8003226:	4640      	mov	r0, r8
 8003228:	f7ff fee4 	bl	8002ff4 <_printf_common>
 800322c:	3001      	adds	r0, #1
 800322e:	d14a      	bne.n	80032c6 <_printf_i+0x1f6>
 8003230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003234:	b004      	add	sp, #16
 8003236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	f043 0320 	orr.w	r3, r3, #32
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	4833      	ldr	r0, [pc, #204]	; (8003310 <_printf_i+0x240>)
 8003244:	2778      	movs	r7, #120	; 0x78
 8003246:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	6829      	ldr	r1, [r5, #0]
 800324e:	061f      	lsls	r7, r3, #24
 8003250:	f851 6b04 	ldr.w	r6, [r1], #4
 8003254:	d402      	bmi.n	800325c <_printf_i+0x18c>
 8003256:	065f      	lsls	r7, r3, #25
 8003258:	bf48      	it	mi
 800325a:	b2b6      	uxthmi	r6, r6
 800325c:	07df      	lsls	r7, r3, #31
 800325e:	bf48      	it	mi
 8003260:	f043 0320 	orrmi.w	r3, r3, #32
 8003264:	6029      	str	r1, [r5, #0]
 8003266:	bf48      	it	mi
 8003268:	6023      	strmi	r3, [r4, #0]
 800326a:	b91e      	cbnz	r6, 8003274 <_printf_i+0x1a4>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	f023 0320 	bic.w	r3, r3, #32
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	2310      	movs	r3, #16
 8003276:	e7a7      	b.n	80031c8 <_printf_i+0xf8>
 8003278:	4824      	ldr	r0, [pc, #144]	; (800330c <_printf_i+0x23c>)
 800327a:	e7e4      	b.n	8003246 <_printf_i+0x176>
 800327c:	4615      	mov	r5, r2
 800327e:	e7bd      	b.n	80031fc <_printf_i+0x12c>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	6826      	ldr	r6, [r4, #0]
 8003284:	6961      	ldr	r1, [r4, #20]
 8003286:	1d18      	adds	r0, r3, #4
 8003288:	6028      	str	r0, [r5, #0]
 800328a:	0635      	lsls	r5, r6, #24
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	d501      	bpl.n	8003294 <_printf_i+0x1c4>
 8003290:	6019      	str	r1, [r3, #0]
 8003292:	e002      	b.n	800329a <_printf_i+0x1ca>
 8003294:	0670      	lsls	r0, r6, #25
 8003296:	d5fb      	bpl.n	8003290 <_printf_i+0x1c0>
 8003298:	8019      	strh	r1, [r3, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	6123      	str	r3, [r4, #16]
 800329e:	4615      	mov	r5, r2
 80032a0:	e7bc      	b.n	800321c <_printf_i+0x14c>
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	1d1a      	adds	r2, r3, #4
 80032a6:	602a      	str	r2, [r5, #0]
 80032a8:	681d      	ldr	r5, [r3, #0]
 80032aa:	6862      	ldr	r2, [r4, #4]
 80032ac:	2100      	movs	r1, #0
 80032ae:	4628      	mov	r0, r5
 80032b0:	f7fc ff96 	bl	80001e0 <memchr>
 80032b4:	b108      	cbz	r0, 80032ba <_printf_i+0x1ea>
 80032b6:	1b40      	subs	r0, r0, r5
 80032b8:	6060      	str	r0, [r4, #4]
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	6123      	str	r3, [r4, #16]
 80032be:	2300      	movs	r3, #0
 80032c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032c4:	e7aa      	b.n	800321c <_printf_i+0x14c>
 80032c6:	6923      	ldr	r3, [r4, #16]
 80032c8:	462a      	mov	r2, r5
 80032ca:	4649      	mov	r1, r9
 80032cc:	4640      	mov	r0, r8
 80032ce:	47d0      	blx	sl
 80032d0:	3001      	adds	r0, #1
 80032d2:	d0ad      	beq.n	8003230 <_printf_i+0x160>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	079b      	lsls	r3, r3, #30
 80032d8:	d413      	bmi.n	8003302 <_printf_i+0x232>
 80032da:	68e0      	ldr	r0, [r4, #12]
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	4298      	cmp	r0, r3
 80032e0:	bfb8      	it	lt
 80032e2:	4618      	movlt	r0, r3
 80032e4:	e7a6      	b.n	8003234 <_printf_i+0x164>
 80032e6:	2301      	movs	r3, #1
 80032e8:	4632      	mov	r2, r6
 80032ea:	4649      	mov	r1, r9
 80032ec:	4640      	mov	r0, r8
 80032ee:	47d0      	blx	sl
 80032f0:	3001      	adds	r0, #1
 80032f2:	d09d      	beq.n	8003230 <_printf_i+0x160>
 80032f4:	3501      	adds	r5, #1
 80032f6:	68e3      	ldr	r3, [r4, #12]
 80032f8:	9903      	ldr	r1, [sp, #12]
 80032fa:	1a5b      	subs	r3, r3, r1
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	dcf2      	bgt.n	80032e6 <_printf_i+0x216>
 8003300:	e7eb      	b.n	80032da <_printf_i+0x20a>
 8003302:	2500      	movs	r5, #0
 8003304:	f104 0619 	add.w	r6, r4, #25
 8003308:	e7f5      	b.n	80032f6 <_printf_i+0x226>
 800330a:	bf00      	nop
 800330c:	08003445 	.word	0x08003445
 8003310:	08003456 	.word	0x08003456

08003314 <memmove>:
 8003314:	4288      	cmp	r0, r1
 8003316:	b510      	push	{r4, lr}
 8003318:	eb01 0402 	add.w	r4, r1, r2
 800331c:	d902      	bls.n	8003324 <memmove+0x10>
 800331e:	4284      	cmp	r4, r0
 8003320:	4623      	mov	r3, r4
 8003322:	d807      	bhi.n	8003334 <memmove+0x20>
 8003324:	1e43      	subs	r3, r0, #1
 8003326:	42a1      	cmp	r1, r4
 8003328:	d008      	beq.n	800333c <memmove+0x28>
 800332a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800332e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003332:	e7f8      	b.n	8003326 <memmove+0x12>
 8003334:	4402      	add	r2, r0
 8003336:	4601      	mov	r1, r0
 8003338:	428a      	cmp	r2, r1
 800333a:	d100      	bne.n	800333e <memmove+0x2a>
 800333c:	bd10      	pop	{r4, pc}
 800333e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003346:	e7f7      	b.n	8003338 <memmove+0x24>

08003348 <_sbrk_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4d06      	ldr	r5, [pc, #24]	; (8003364 <_sbrk_r+0x1c>)
 800334c:	2300      	movs	r3, #0
 800334e:	4604      	mov	r4, r0
 8003350:	4608      	mov	r0, r1
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	f7fd fb2a 	bl	80009ac <_sbrk>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d102      	bne.n	8003362 <_sbrk_r+0x1a>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	b103      	cbz	r3, 8003362 <_sbrk_r+0x1a>
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	20000314 	.word	0x20000314

08003368 <_realloc_r>:
 8003368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336c:	4680      	mov	r8, r0
 800336e:	4614      	mov	r4, r2
 8003370:	460e      	mov	r6, r1
 8003372:	b921      	cbnz	r1, 800337e <_realloc_r+0x16>
 8003374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003378:	4611      	mov	r1, r2
 800337a:	f7ff bc57 	b.w	8002c2c <_malloc_r>
 800337e:	b92a      	cbnz	r2, 800338c <_realloc_r+0x24>
 8003380:	f7ff fbe8 	bl	8002b54 <_free_r>
 8003384:	4625      	mov	r5, r4
 8003386:	4628      	mov	r0, r5
 8003388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800338c:	f000 f81b 	bl	80033c6 <_malloc_usable_size_r>
 8003390:	4284      	cmp	r4, r0
 8003392:	4607      	mov	r7, r0
 8003394:	d802      	bhi.n	800339c <_realloc_r+0x34>
 8003396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800339a:	d812      	bhi.n	80033c2 <_realloc_r+0x5a>
 800339c:	4621      	mov	r1, r4
 800339e:	4640      	mov	r0, r8
 80033a0:	f7ff fc44 	bl	8002c2c <_malloc_r>
 80033a4:	4605      	mov	r5, r0
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d0ed      	beq.n	8003386 <_realloc_r+0x1e>
 80033aa:	42bc      	cmp	r4, r7
 80033ac:	4622      	mov	r2, r4
 80033ae:	4631      	mov	r1, r6
 80033b0:	bf28      	it	cs
 80033b2:	463a      	movcs	r2, r7
 80033b4:	f7ff fbc0 	bl	8002b38 <memcpy>
 80033b8:	4631      	mov	r1, r6
 80033ba:	4640      	mov	r0, r8
 80033bc:	f7ff fbca 	bl	8002b54 <_free_r>
 80033c0:	e7e1      	b.n	8003386 <_realloc_r+0x1e>
 80033c2:	4635      	mov	r5, r6
 80033c4:	e7df      	b.n	8003386 <_realloc_r+0x1e>

080033c6 <_malloc_usable_size_r>:
 80033c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ca:	1f18      	subs	r0, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bfbc      	itt	lt
 80033d0:	580b      	ldrlt	r3, [r1, r0]
 80033d2:	18c0      	addlt	r0, r0, r3
 80033d4:	4770      	bx	lr
	...

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
